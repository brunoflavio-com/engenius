// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* stub/Service1.h
   Generated by wsdl2h 2.8.17 from service1.wsdl and typemap.dat
   2013-12-13 18:30:21 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on stub/Service1.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://wvm008.dei.isep.ipp.pt                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://wvm008.dei.isep.ipp.pt"
ns2 = "http://wvm008.dei.isep.ipp.pt/Imports"
ns3 = "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://wvm008.dei.isep.ipp.pt/Imports"
//gsoap ns2   schema namespace:	http://wvm008.dei.isep.ipp.pt/Imports
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://wvm008.dei.isep.ipp.pt"
//gsoap ns1   schema namespace:	http://wvm008.dei.isep.ipp.pt
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://schemas.datacontract.org/2004/07/SocialGamePublicAPI"
//gsoap ns3   schema namespace:	http://schemas.datacontract.org/2004/07/SocialGamePublicAPI
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _ns1__Login.
class _ns1__Login;

//  Forward declaration of class _ns1__LoginResponse.
class _ns1__LoginResponse;

//  Forward declaration of class _ns1__GetGraph.
class _ns1__GetGraph;

//  Forward declaration of class _ns1__GetGraphResponse.
class _ns1__GetGraphResponse;

//  Forward declaration of class _ns1__Logout.
class _ns1__Logout;

//  Forward declaration of class _ns1__LogoutResponse.
class _ns1__LogoutResponse;

//  Forward declaration of class ns3__UserContract.
class ns3__UserContract;

//  Forward declaration of class ns3__ArrayOfConnectionContract.
class ns3__ArrayOfConnectionContract;

//  Forward declaration of class ns3__ConnectionContract.
class ns3__ConnectionContract;

//  Forward declaration of class ns3__ConnectionTagContract.
class ns3__ConnectionTagContract;

//  Forward declaration of class ns3__HumorContract.
class ns3__HumorContract;

//  Forward declaration of class ns3__ArrayOfUserTagContract.
class ns3__ArrayOfUserTagContract;

//  Forward declaration of class ns3__UserTagContract.
class ns3__UserTagContract;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://wvm008.dei.isep.ipp.pt/Imports                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://wvm008.dei.isep.ipp.pt                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/SocialGamePublicAPI              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://wvm008.dei.isep.ipp.pt/Imports                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://wvm008.dei.isep.ipp.pt                                            *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://wvm008.dei.isep.ipp.pt":Login

/// "http://wvm008.dei.isep.ipp.pt":Login is a complexType.
/// class _ns1__Login operations:
/// - soap_new__ns1__Login(soap*) allocate
/// - soap_new__ns1__Login(soap*, int num) allocate array
/// - soap_new_req__ns1__Login(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__Login(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__Login(soap*, _ns1__Login*) deserialize from a stream
/// - int soap_write__ns1__Login(soap, _ns1__Login*) serialize to a stream
class _ns1__Login
{ public:
/// Element Email of type xs:string.
    std::string*                         Email                          0;	///< Nillable pointer.
/// Element Password of type xs:string.
    std::string*                         Password                       0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://wvm008.dei.isep.ipp.pt":LoginResponse

/// "http://wvm008.dei.isep.ipp.pt":LoginResponse is a complexType.
/// class _ns1__LoginResponse operations:
/// - soap_new__ns1__LoginResponse(soap*) allocate
/// - soap_new__ns1__LoginResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__LoginResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__LoginResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__LoginResponse(soap*, _ns1__LoginResponse*) deserialize from a stream
/// - int soap_write__ns1__LoginResponse(soap, _ns1__LoginResponse*) serialize to a stream
class _ns1__LoginResponse
{ public:
/// Element LoginResult of type xs:string.
    std::string*                         LoginResult                    0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://wvm008.dei.isep.ipp.pt":GetGraph

/// "http://wvm008.dei.isep.ipp.pt":GetGraph is a complexType.
/// class _ns1__GetGraph operations:
/// - soap_new__ns1__GetGraph(soap*) allocate
/// - soap_new__ns1__GetGraph(soap*, int num) allocate array
/// - soap_new_req__ns1__GetGraph(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetGraph(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetGraph(soap*, _ns1__GetGraph*) deserialize from a stream
/// - int soap_write__ns1__GetGraph(soap, _ns1__GetGraph*) serialize to a stream
class _ns1__GetGraph
{ public:
/// Element Token of type xs:string.
    std::string*                         Token                          0;	///< Nillable pointer.
/// Element Email of type xs:string.
    std::string*                         Email                          0;	///< Nillable pointer.
/// Element graphDepth of type xs:int.
    int*                                 graphDepth                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://wvm008.dei.isep.ipp.pt":GetGraphResponse

/// "http://wvm008.dei.isep.ipp.pt":GetGraphResponse is a complexType.
/// class _ns1__GetGraphResponse operations:
/// - soap_new__ns1__GetGraphResponse(soap*) allocate
/// - soap_new__ns1__GetGraphResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetGraphResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetGraphResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetGraphResponse(soap*, _ns1__GetGraphResponse*) deserialize from a stream
/// - int soap_write__ns1__GetGraphResponse(soap, _ns1__GetGraphResponse*) serialize to a stream
class _ns1__GetGraphResponse
{ public:
/// Element GetGraphResult of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":UserContract.
    ns3__UserContract*                   GetGraphResult                 0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://wvm008.dei.isep.ipp.pt":Logout

/// "http://wvm008.dei.isep.ipp.pt":Logout is a complexType.
/// class _ns1__Logout operations:
/// - soap_new__ns1__Logout(soap*) allocate
/// - soap_new__ns1__Logout(soap*, int num) allocate array
/// - soap_new_req__ns1__Logout(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__Logout(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__Logout(soap*, _ns1__Logout*) deserialize from a stream
/// - int soap_write__ns1__Logout(soap, _ns1__Logout*) serialize to a stream
class _ns1__Logout
{ public:
/// Element Token of type xs:string.
    std::string*                         Token                          0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://wvm008.dei.isep.ipp.pt":LogoutResponse

/// "http://wvm008.dei.isep.ipp.pt":LogoutResponse is a complexType.
/// class _ns1__LogoutResponse operations:
/// - soap_new__ns1__LogoutResponse(soap*) allocate
/// - soap_new__ns1__LogoutResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__LogoutResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__LogoutResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__LogoutResponse(soap*, _ns1__LogoutResponse*) deserialize from a stream
/// - int soap_write__ns1__LogoutResponse(soap, _ns1__LogoutResponse*) serialize to a stream
class _ns1__LogoutResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.datacontract.org/2004/07/SocialGamePublicAPI              *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":UserContract is a complexType.
/// class ns3__UserContract operations:
/// - soap_new_ns3__UserContract(soap*) allocate
/// - soap_new_ns3__UserContract(soap*, int num) allocate array
/// - soap_new_req_ns3__UserContract(soap*, ...) allocate, set required members
/// - soap_new_set_ns3__UserContract(soap*, ...) allocate, set all public members
/// - int soap_read_ns3__UserContract(soap*, ns3__UserContract*) deserialize from a stream
/// - int soap_write_ns3__UserContract(soap, ns3__UserContract*) serialize to a stream
class ns3__UserContract
{ public:
/// Element Connections of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ArrayOfConnectionContract.
    ns3__ArrayOfConnectionContract*      Connections                    0;	///< Nillable pointer.
/// Element Email of type xs:string.
    std::string*                         Email                          0;	///< Nillable pointer.
/// Element Humor of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":HumorContract.
    ns3__HumorContract*                  Humor                          0;	///< Nillable pointer.
/// Element UserTags of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ArrayOfUserTagContract.
    ns3__ArrayOfUserTagContract*         UserTags                       0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ArrayOfConnectionContract is a complexType.
/// class ns3__ArrayOfConnectionContract operations:
/// - soap_new_ns3__ArrayOfConnectionContract(soap*) allocate
/// - soap_new_ns3__ArrayOfConnectionContract(soap*, int num) allocate array
/// - soap_new_req_ns3__ArrayOfConnectionContract(soap*, ...) allocate, set required members
/// - soap_new_set_ns3__ArrayOfConnectionContract(soap*, ...) allocate, set all public members
/// - int soap_read_ns3__ArrayOfConnectionContract(soap*, ns3__ArrayOfConnectionContract*) deserialize from a stream
/// - int soap_write_ns3__ArrayOfConnectionContract(soap, ns3__ArrayOfConnectionContract*) serialize to a stream
class ns3__ArrayOfConnectionContract
{ public:
/// Vector of ns3__ConnectionContract* with length 0..unbounded
    std::vector<ns3__ConnectionContract*> ConnectionContract             0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ConnectionContract is a complexType.
/// class ns3__ConnectionContract operations:
/// - soap_new_ns3__ConnectionContract(soap*) allocate
/// - soap_new_ns3__ConnectionContract(soap*, int num) allocate array
/// - soap_new_req_ns3__ConnectionContract(soap*, ...) allocate, set required members
/// - soap_new_set_ns3__ConnectionContract(soap*, ...) allocate, set all public members
/// - int soap_read_ns3__ConnectionContract(soap*, ns3__ConnectionContract*) deserialize from a stream
/// - int soap_write_ns3__ConnectionContract(soap, ns3__ConnectionContract*) serialize to a stream
class ns3__ConnectionContract
{ public:
/// Element ConnectionTag of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ConnectionTagContract.
    ns3__ConnectionTagContract*          ConnectionTag                  0;	///< Nillable pointer.
/// Element Id of type xs:int.
    int*                                 Id                             0;	///< Optional element.
/// Element Strength of type xs:int.
    int*                                 Strength                       0;	///< Optional element.
/// Element User of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":UserContract.
    ns3__UserContract*                   User                           0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ConnectionTagContract is a complexType.
/// class ns3__ConnectionTagContract operations:
/// - soap_new_ns3__ConnectionTagContract(soap*) allocate
/// - soap_new_ns3__ConnectionTagContract(soap*, int num) allocate array
/// - soap_new_req_ns3__ConnectionTagContract(soap*, ...) allocate, set required members
/// - soap_new_set_ns3__ConnectionTagContract(soap*, ...) allocate, set all public members
/// - int soap_read_ns3__ConnectionTagContract(soap*, ns3__ConnectionTagContract*) deserialize from a stream
/// - int soap_write_ns3__ConnectionTagContract(soap, ns3__ConnectionTagContract*) serialize to a stream
class ns3__ConnectionTagContract
{ public:
/// Element ConnectionTagName of type xs:string.
    std::string*                         ConnectionTagName              0;	///< Nillable pointer.
/// Element Id of type xs:int.
    int*                                 Id                             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":HumorContract is a complexType.
/// class ns3__HumorContract operations:
/// - soap_new_ns3__HumorContract(soap*) allocate
/// - soap_new_ns3__HumorContract(soap*, int num) allocate array
/// - soap_new_req_ns3__HumorContract(soap*, ...) allocate, set required members
/// - soap_new_set_ns3__HumorContract(soap*, ...) allocate, set all public members
/// - int soap_read_ns3__HumorContract(soap*, ns3__HumorContract*) deserialize from a stream
/// - int soap_write_ns3__HumorContract(soap, ns3__HumorContract*) serialize to a stream
class ns3__HumorContract
{ public:
/// Element HumorName of type xs:string.
    std::string*                         HumorName                      0;	///< Nillable pointer.
/// Element Id of type xs:int.
    int*                                 Id                             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ArrayOfUserTagContract is a complexType.
/// class ns3__ArrayOfUserTagContract operations:
/// - soap_new_ns3__ArrayOfUserTagContract(soap*) allocate
/// - soap_new_ns3__ArrayOfUserTagContract(soap*, int num) allocate array
/// - soap_new_req_ns3__ArrayOfUserTagContract(soap*, ...) allocate, set required members
/// - soap_new_set_ns3__ArrayOfUserTagContract(soap*, ...) allocate, set all public members
/// - int soap_read_ns3__ArrayOfUserTagContract(soap*, ns3__ArrayOfUserTagContract*) deserialize from a stream
/// - int soap_write_ns3__ArrayOfUserTagContract(soap, ns3__ArrayOfUserTagContract*) serialize to a stream
class ns3__ArrayOfUserTagContract
{ public:
/// Vector of ns3__UserTagContract* with length 0..unbounded
    std::vector<ns3__UserTagContract*  > UserTagContract                0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":UserTagContract is a complexType.
/// class ns3__UserTagContract operations:
/// - soap_new_ns3__UserTagContract(soap*) allocate
/// - soap_new_ns3__UserTagContract(soap*, int num) allocate array
/// - soap_new_req_ns3__UserTagContract(soap*, ...) allocate, set required members
/// - soap_new_set_ns3__UserTagContract(soap*, ...) allocate, set all public members
/// - int soap_read_ns3__UserTagContract(soap*, ns3__UserTagContract*) deserialize from a stream
/// - int soap_write_ns3__UserTagContract(soap, ns3__UserTagContract*) serialize to a stream
class ns3__UserTagContract
{ public:
/// Element Id of type xs:int.
    int*                                 Id                             0;	///< Optional element.
/// Element UserTagName of type xs:string.
    std::string*                         UserTagName                    0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://wvm008.dei.isep.ipp.pt/Imports                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://wvm008.dei.isep.ipp.pt/Imports                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://wvm008.dei.isep.ipp.pt                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://wvm008.dei.isep.ipp.pt                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.datacontract.org/2004/07/SocialGamePublicAPI              *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":UserContract of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":UserContract.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ArrayOfConnectionContract of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ArrayOfConnectionContract.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ConnectionContract of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ConnectionContract.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ConnectionTagContract of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ConnectionTagContract.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":HumorContract of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":HumorContract.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ArrayOfUserTagContract of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":ArrayOfUserTagContract.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":UserTagContract of type "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI":UserTagContract.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.datacontract.org/2004/07/SocialGamePublicAPI              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	BasicHttpBinding_USCOREISocialGameService 
//gsoap ns1  service type:	ISocialGameService 
//gsoap ns1  service port:	http://wvm008.dei.isep.ipp.pt/SocialGameAPI.svc 
//gsoap ns1  service namespace:	http://wvm008.dei.isep.ipp.pt 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage SocialGameService Definitions

@section SocialGameService_bindings Service Bindings

  - @ref BasicHttpBinding_USCOREISocialGameService

@section SocialGameService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BasicHttpBinding_USCOREISocialGameService Binding "BasicHttpBinding_USCOREISocialGameService"

@section BasicHttpBinding_USCOREISocialGameService_operations Operations of Binding  "BasicHttpBinding_USCOREISocialGameService"

  - @ref __ns1__Login

  - @ref __ns1__GetGraph

  - @ref __ns1__Logout

@section BasicHttpBinding_USCOREISocialGameService_ports Endpoints of Binding  "BasicHttpBinding_USCOREISocialGameService"

  - http://wvm008.dei.isep.ipp.pt/SocialGameAPI.svc

Note: use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BasicHttpBinding_USCOREISocialGameService                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__Login" of service binding "BasicHttpBinding_USCOREISocialGameService"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://wvm008.dei.isep.ipp.pt/ISocialGameService/Login"

  - Addressing input action: "http://wvm008.dei.isep.ipp.pt/ISocialGameService/Login"

  - Addressing output action: "http://wvm008.dei.isep.ipp.pt/ISocialGameService/LoginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Login*                        ns1__Login,
    // output parameters:
    _ns1__LoginResponse*                ns1__LoginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login(
    struct soap *soap,
    // input parameters:
    _ns1__Login*                        ns1__Login,
    // output parameters:
    _ns1__LoginResponse*                ns1__LoginResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREISocialGameServiceProxy.h):
@code
  class BasicHttpBinding_USCOREISocialGameServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREISocialGameServiceService.h):
@code
  class BasicHttpBinding_USCOREISocialGameServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Login SOAP
//gsoap ns1  service method-style:	Login document
//gsoap ns1  service method-encoding:	Login literal
//gsoap ns1  service method-input-action:	Login http://wvm008.dei.isep.ipp.pt/ISocialGameService/Login
//gsoap ns1  service method-output-action:	Login http://wvm008.dei.isep.ipp.pt/ISocialGameService/LoginResponse
int __ns1__Login(
    _ns1__Login*                        ns1__Login,	///< Input parameter
    _ns1__LoginResponse*                ns1__LoginResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetGraph                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetGraph" of service binding "BasicHttpBinding_USCOREISocialGameService"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://wvm008.dei.isep.ipp.pt/ISocialGameService/GetGraph"

  - Addressing input action: "http://wvm008.dei.isep.ipp.pt/ISocialGameService/GetGraph"

  - Addressing output action: "http://wvm008.dei.isep.ipp.pt/ISocialGameService/GetGraphResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetGraph(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetGraph*                     ns1__GetGraph,
    // output parameters:
    _ns1__GetGraphResponse*             ns1__GetGraphResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetGraph(
    struct soap *soap,
    // input parameters:
    _ns1__GetGraph*                     ns1__GetGraph,
    // output parameters:
    _ns1__GetGraphResponse*             ns1__GetGraphResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREISocialGameServiceProxy.h):
@code
  class BasicHttpBinding_USCOREISocialGameServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREISocialGameServiceService.h):
@code
  class BasicHttpBinding_USCOREISocialGameServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetGraph SOAP
//gsoap ns1  service method-style:	GetGraph document
//gsoap ns1  service method-encoding:	GetGraph literal
//gsoap ns1  service method-input-action:	GetGraph http://wvm008.dei.isep.ipp.pt/ISocialGameService/GetGraph
//gsoap ns1  service method-output-action:	GetGraph http://wvm008.dei.isep.ipp.pt/ISocialGameService/GetGraphResponse
int __ns1__GetGraph(
    _ns1__GetGraph*                     ns1__GetGraph,	///< Input parameter
    _ns1__GetGraphResponse*             ns1__GetGraphResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Logout                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__Logout" of service binding "BasicHttpBinding_USCOREISocialGameService"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://wvm008.dei.isep.ipp.pt/ISocialGameService/Logout"

  - Addressing input action: "http://wvm008.dei.isep.ipp.pt/ISocialGameService/Logout"

  - Addressing output action: "http://wvm008.dei.isep.ipp.pt/ISocialGameService/LogoutResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Logout(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Logout*                       ns1__Logout,
    // output parameters:
    _ns1__LogoutResponse*               ns1__LogoutResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Logout(
    struct soap *soap,
    // input parameters:
    _ns1__Logout*                       ns1__Logout,
    // output parameters:
    _ns1__LogoutResponse*               ns1__LogoutResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREISocialGameServiceProxy.h):
@code
  class BasicHttpBinding_USCOREISocialGameServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREISocialGameServiceService.h):
@code
  class BasicHttpBinding_USCOREISocialGameServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Logout SOAP
//gsoap ns1  service method-style:	Logout document
//gsoap ns1  service method-encoding:	Logout literal
//gsoap ns1  service method-input-action:	Logout http://wvm008.dei.isep.ipp.pt/ISocialGameService/Logout
//gsoap ns1  service method-output-action:	Logout http://wvm008.dei.isep.ipp.pt/ISocialGameService/LogoutResponse
int __ns1__Logout(
    _ns1__Logout*                       ns1__Logout,	///< Input parameter
    _ns1__LogoutResponse*               ns1__LogoutResponse	///< Output parameter
);

/**

@page BasicHttpBinding_USCOREISocialGameService Binding "BasicHttpBinding_USCOREISocialGameService"

@section BasicHttpBinding_USCOREISocialGameService_policy_enablers Policy Enablers of Binding  "BasicHttpBinding_USCOREISocialGameService"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns2 Top-level root elements of schema "http://wvm008.dei.isep.ipp.pt/Imports"

@section ns1 Top-level root elements of schema "http://wvm008.dei.isep.ipp.pt"

  - <ns1:Login> @ref _ns1__Login
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Login(struct soap*, _ns1__Login*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Login(struct soap*, _ns1__Login*);
    @endcode

  - <ns1:LoginResponse> @ref _ns1__LoginResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LoginResponse(struct soap*, _ns1__LoginResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LoginResponse(struct soap*, _ns1__LoginResponse*);
    @endcode

  - <ns1:GetGraph> @ref _ns1__GetGraph
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetGraph(struct soap*, _ns1__GetGraph*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetGraph(struct soap*, _ns1__GetGraph*);
    @endcode

  - <ns1:GetGraphResponse> @ref _ns1__GetGraphResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetGraphResponse(struct soap*, _ns1__GetGraphResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetGraphResponse(struct soap*, _ns1__GetGraphResponse*);
    @endcode

  - <ns1:Logout> @ref _ns1__Logout
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Logout(struct soap*, _ns1__Logout*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Logout(struct soap*, _ns1__Logout*);
    @endcode

  - <ns1:LogoutResponse> @ref _ns1__LogoutResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LogoutResponse(struct soap*, _ns1__LogoutResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LogoutResponse(struct soap*, _ns1__LogoutResponse*);
    @endcode

@section ns3 Top-level root elements of schema "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI"

  - <ns3:UserContract> (use wsdl2h option -g to auto-generate)

  - <ns3:ArrayOfConnectionContract> (use wsdl2h option -g to auto-generate)

  - <ns3:ConnectionContract> (use wsdl2h option -g to auto-generate)

  - <ns3:ConnectionTagContract> (use wsdl2h option -g to auto-generate)

  - <ns3:HumorContract> (use wsdl2h option -g to auto-generate)

  - <ns3:ArrayOfUserTagContract> (use wsdl2h option -g to auto-generate)

  - <ns3:UserTagContract> (use wsdl2h option -g to auto-generate)

*/

/* End of stub/Service1.h */
