/* soapBasicHttpBinding_USCOREISocialGameServiceProxy.h
   Generated by gSOAP 2.8.17 from stub/Service1.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapBasicHttpBinding_USCOREISocialGameServiceProxy_H
#define soapBasicHttpBinding_USCOREISocialGameServiceProxy_H
#include "soapH.h"

class SOAP_CMAC BasicHttpBinding_USCOREISocialGameServiceProxy
{ public:
	struct soap *soap;
	bool own;
	/// Endpoint URL of service 'BasicHttpBinding_USCOREISocialGameServiceProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	BasicHttpBinding_USCOREISocialGameServiceProxy();
	/// Constructor to use/share an engine state
	BasicHttpBinding_USCOREISocialGameServiceProxy(struct soap*);
	/// Constructor with endpoint URL
	BasicHttpBinding_USCOREISocialGameServiceProxy(const char *url);
	/// Constructor with engine input+output mode control
	BasicHttpBinding_USCOREISocialGameServiceProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	BasicHttpBinding_USCOREISocialGameServiceProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	BasicHttpBinding_USCOREISocialGameServiceProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~BasicHttpBinding_USCOREISocialGameServiceProxy();
	/// Initializer used by constructors
	virtual	void BasicHttpBinding_USCOREISocialGameServiceProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'Login' (returns error code or SOAP_OK)
	virtual	int Login(_ns1__Login *ns1__Login, _ns1__LoginResponse *ns1__LoginResponse) { return this->Login(NULL, NULL, ns1__Login, ns1__LoginResponse); }
	virtual	int Login(const char *endpoint, const char *soap_action, _ns1__Login *ns1__Login, _ns1__LoginResponse *ns1__LoginResponse);

	/// Web service operation 'GetGraph' (returns error code or SOAP_OK)
	virtual	int GetGraph(_ns1__GetGraph *ns1__GetGraph, _ns1__GetGraphResponse *ns1__GetGraphResponse) { return this->GetGraph(NULL, NULL, ns1__GetGraph, ns1__GetGraphResponse); }
	virtual	int GetGraph(const char *endpoint, const char *soap_action, _ns1__GetGraph *ns1__GetGraph, _ns1__GetGraphResponse *ns1__GetGraphResponse);

	/// Web service operation 'Logout' (returns error code or SOAP_OK)
	virtual	int Logout(_ns1__Logout *ns1__Logout, _ns1__LogoutResponse *ns1__LogoutResponse) { return this->Logout(NULL, NULL, ns1__Logout, ns1__LogoutResponse); }
	virtual	int Logout(const char *endpoint, const char *soap_action, _ns1__Logout *ns1__Logout, _ns1__LogoutResponse *ns1__LogoutResponse);

	/// Web service operation 'getRandomWordCategories' (returns error code or SOAP_OK)
	virtual	int getRandomWordCategories(_ns1__getRandomWordCategories *ns1__getRandomWordCategories, _ns1__getRandomWordCategoriesResponse *ns1__getRandomWordCategoriesResponse) { return this->getRandomWordCategories(NULL, NULL, ns1__getRandomWordCategories, ns1__getRandomWordCategoriesResponse); }
	virtual	int getRandomWordCategories(const char *endpoint, const char *soap_action, _ns1__getRandomWordCategories *ns1__getRandomWordCategories, _ns1__getRandomWordCategoriesResponse *ns1__getRandomWordCategoriesResponse);

	/// Web service operation 'getRandomWordFromCategory' (returns error code or SOAP_OK)
	virtual	int getRandomWordFromCategory(_ns1__getRandomWordFromCategory *ns1__getRandomWordFromCategory, _ns1__getRandomWordFromCategoryResponse *ns1__getRandomWordFromCategoryResponse) { return this->getRandomWordFromCategory(NULL, NULL, ns1__getRandomWordFromCategory, ns1__getRandomWordFromCategoryResponse); }
	virtual	int getRandomWordFromCategory(const char *endpoint, const char *soap_action, _ns1__getRandomWordFromCategory *ns1__getRandomWordFromCategory, _ns1__getRandomWordFromCategoryResponse *ns1__getRandomWordFromCategoryResponse);

	/// Web service operation 'getMaze' (returns error code or SOAP_OK)
	virtual	int getMaze(_ns1__getMaze *ns1__getMaze, _ns1__getMazeResponse *ns1__getMazeResponse) { return this->getMaze(NULL, NULL, ns1__getMaze, ns1__getMazeResponse); }
	virtual	int getMaze(const char *endpoint, const char *soap_action, _ns1__getMaze *ns1__getMaze, _ns1__getMazeResponse *ns1__getMazeResponse);

	/// Web service operation 'getUserGameInfo' (returns error code or SOAP_OK)
	virtual	int getUserGameInfo(_ns1__getUserGameInfo *ns1__getUserGameInfo, _ns1__getUserGameInfoResponse *ns1__getUserGameInfoResponse) { return this->getUserGameInfo(NULL, NULL, ns1__getUserGameInfo, ns1__getUserGameInfoResponse); }
	virtual	int getUserGameInfo(const char *endpoint, const char *soap_action, _ns1__getUserGameInfo *ns1__getUserGameInfo, _ns1__getUserGameInfoResponse *ns1__getUserGameInfoResponse);

	/// Web service operation 'setUserLevel' (returns error code or SOAP_OK)
	virtual	int setUserLevel(_ns1__setUserLevel *ns1__setUserLevel, _ns1__setUserLevelResponse *ns1__setUserLevelResponse) { return this->setUserLevel(NULL, NULL, ns1__setUserLevel, ns1__setUserLevelResponse); }
	virtual	int setUserLevel(const char *endpoint, const char *soap_action, _ns1__setUserLevel *ns1__setUserLevel, _ns1__setUserLevelResponse *ns1__setUserLevelResponse);

	/// Web service operation 'setUserPoints' (returns error code or SOAP_OK)
	virtual	int setUserPoints(_ns1__setUserPoints *ns1__setUserPoints, _ns1__setUserPointsResponse *ns1__setUserPointsResponse) { return this->setUserPoints(NULL, NULL, ns1__setUserPoints, ns1__setUserPointsResponse); }
	virtual	int setUserPoints(const char *endpoint, const char *soap_action, _ns1__setUserPoints *ns1__setUserPoints, _ns1__setUserPointsResponse *ns1__setUserPointsResponse);
};
#endif
