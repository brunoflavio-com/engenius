/* soapC.cpp
   Generated by gSOAP 2.8.17 from stub/Service1.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.17 2013-12-13 18:30:21 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns3__UserTagContract:
		return soap_in_ns3__UserTagContract(soap, NULL, NULL, "ns3:UserTagContract");
	case SOAP_TYPE_ns3__ArrayOfUserTagContract:
		return soap_in_ns3__ArrayOfUserTagContract(soap, NULL, NULL, "ns3:ArrayOfUserTagContract");
	case SOAP_TYPE_ns3__HumorContract:
		return soap_in_ns3__HumorContract(soap, NULL, NULL, "ns3:HumorContract");
	case SOAP_TYPE_ns3__ConnectionTagContract:
		return soap_in_ns3__ConnectionTagContract(soap, NULL, NULL, "ns3:ConnectionTagContract");
	case SOAP_TYPE_ns3__ConnectionContract:
		return soap_in_ns3__ConnectionContract(soap, NULL, NULL, "ns3:ConnectionContract");
	case SOAP_TYPE_ns3__ArrayOfConnectionContract:
		return soap_in_ns3__ArrayOfConnectionContract(soap, NULL, NULL, "ns3:ArrayOfConnectionContract");
	case SOAP_TYPE_ns3__UserContract:
		return soap_in_ns3__UserContract(soap, NULL, NULL, "ns3:UserContract");
	case SOAP_TYPE_PointerTo_ns1__LogoutResponse:
		return soap_in_PointerTo_ns1__LogoutResponse(soap, NULL, NULL, "ns1:LogoutResponse");
	case SOAP_TYPE_PointerTo_ns1__Logout:
		return soap_in_PointerTo_ns1__Logout(soap, NULL, NULL, "ns1:Logout");
	case SOAP_TYPE_PointerTo_ns1__GetGraphResponse:
		return soap_in_PointerTo_ns1__GetGraphResponse(soap, NULL, NULL, "ns1:GetGraphResponse");
	case SOAP_TYPE_PointerTo_ns1__GetGraph:
		return soap_in_PointerTo_ns1__GetGraph(soap, NULL, NULL, "ns1:GetGraph");
	case SOAP_TYPE_PointerTo_ns1__LoginResponse:
		return soap_in_PointerTo_ns1__LoginResponse(soap, NULL, NULL, "ns1:LoginResponse");
	case SOAP_TYPE_PointerTo_ns1__Login:
		return soap_in_PointerTo_ns1__Login(soap, NULL, NULL, "ns1:Login");
	case SOAP_TYPE_PointerTons3__UserTagContract:
		return soap_in_PointerTons3__UserTagContract(soap, NULL, NULL, "ns3:UserTagContract");
	case SOAP_TYPE_PointerTons3__ConnectionTagContract:
		return soap_in_PointerTons3__ConnectionTagContract(soap, NULL, NULL, "ns3:ConnectionTagContract");
	case SOAP_TYPE_PointerTons3__ConnectionContract:
		return soap_in_PointerTons3__ConnectionContract(soap, NULL, NULL, "ns3:ConnectionContract");
	case SOAP_TYPE_PointerTons3__ArrayOfUserTagContract:
		return soap_in_PointerTons3__ArrayOfUserTagContract(soap, NULL, NULL, "ns3:ArrayOfUserTagContract");
	case SOAP_TYPE_PointerTons3__HumorContract:
		return soap_in_PointerTons3__HumorContract(soap, NULL, NULL, "ns3:HumorContract");
	case SOAP_TYPE_PointerTons3__ArrayOfConnectionContract:
		return soap_in_PointerTons3__ArrayOfConnectionContract(soap, NULL, NULL, "ns3:ArrayOfConnectionContract");
	case SOAP_TYPE_PointerTons3__UserContract:
		return soap_in_PointerTons3__UserContract(soap, NULL, NULL, "ns3:UserContract");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:UserTagContract"))
		{	*type = SOAP_TYPE_ns3__UserTagContract;
			return soap_in_ns3__UserTagContract(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:ArrayOfUserTagContract"))
		{	*type = SOAP_TYPE_ns3__ArrayOfUserTagContract;
			return soap_in_ns3__ArrayOfUserTagContract(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:HumorContract"))
		{	*type = SOAP_TYPE_ns3__HumorContract;
			return soap_in_ns3__HumorContract(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:ConnectionTagContract"))
		{	*type = SOAP_TYPE_ns3__ConnectionTagContract;
			return soap_in_ns3__ConnectionTagContract(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:ConnectionContract"))
		{	*type = SOAP_TYPE_ns3__ConnectionContract;
			return soap_in_ns3__ConnectionContract(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:ArrayOfConnectionContract"))
		{	*type = SOAP_TYPE_ns3__ArrayOfConnectionContract;
			return soap_in_ns3__ArrayOfConnectionContract(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:UserContract"))
		{	*type = SOAP_TYPE_ns3__UserContract;
			return soap_in_ns3__UserContract(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:LogoutResponse"))
		{	*type = SOAP_TYPE__ns1__LogoutResponse;
			return soap_in__ns1__LogoutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Logout"))
		{	*type = SOAP_TYPE__ns1__Logout;
			return soap_in__ns1__Logout(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetGraphResponse"))
		{	*type = SOAP_TYPE__ns1__GetGraphResponse;
			return soap_in__ns1__GetGraphResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetGraph"))
		{	*type = SOAP_TYPE__ns1__GetGraph;
			return soap_in__ns1__GetGraph(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LoginResponse"))
		{	*type = SOAP_TYPE__ns1__LoginResponse;
			return soap_in__ns1__LoginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Login"))
		{	*type = SOAP_TYPE__ns1__Login;
			return soap_in__ns1__Login(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns3__UserTagContract:
		return ((ns3__UserTagContract *)ptr)->soap_out(soap, tag, id, "ns3:UserTagContract");
	case SOAP_TYPE_ns3__ArrayOfUserTagContract:
		return ((ns3__ArrayOfUserTagContract *)ptr)->soap_out(soap, tag, id, "ns3:ArrayOfUserTagContract");
	case SOAP_TYPE_ns3__HumorContract:
		return ((ns3__HumorContract *)ptr)->soap_out(soap, tag, id, "ns3:HumorContract");
	case SOAP_TYPE_ns3__ConnectionTagContract:
		return ((ns3__ConnectionTagContract *)ptr)->soap_out(soap, tag, id, "ns3:ConnectionTagContract");
	case SOAP_TYPE_ns3__ConnectionContract:
		return ((ns3__ConnectionContract *)ptr)->soap_out(soap, tag, id, "ns3:ConnectionContract");
	case SOAP_TYPE_ns3__ArrayOfConnectionContract:
		return ((ns3__ArrayOfConnectionContract *)ptr)->soap_out(soap, tag, id, "ns3:ArrayOfConnectionContract");
	case SOAP_TYPE_ns3__UserContract:
		return ((ns3__UserContract *)ptr)->soap_out(soap, tag, id, "ns3:UserContract");
	case SOAP_TYPE__ns1__LogoutResponse:
		return ((_ns1__LogoutResponse *)ptr)->soap_out(soap, "ns1:LogoutResponse", id, NULL);
	case SOAP_TYPE__ns1__Logout:
		return ((_ns1__Logout *)ptr)->soap_out(soap, "ns1:Logout", id, NULL);
	case SOAP_TYPE__ns1__GetGraphResponse:
		return ((_ns1__GetGraphResponse *)ptr)->soap_out(soap, "ns1:GetGraphResponse", id, NULL);
	case SOAP_TYPE__ns1__GetGraph:
		return ((_ns1__GetGraph *)ptr)->soap_out(soap, "ns1:GetGraph", id, NULL);
	case SOAP_TYPE__ns1__LoginResponse:
		return ((_ns1__LoginResponse *)ptr)->soap_out(soap, "ns1:LoginResponse", id, NULL);
	case SOAP_TYPE__ns1__Login:
		return ((_ns1__Login *)ptr)->soap_out(soap, "ns1:Login", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__LogoutResponse:
		return soap_out_PointerTo_ns1__LogoutResponse(soap, tag, id, (_ns1__LogoutResponse *const*)ptr, "ns1:LogoutResponse");
	case SOAP_TYPE_PointerTo_ns1__Logout:
		return soap_out_PointerTo_ns1__Logout(soap, tag, id, (_ns1__Logout *const*)ptr, "ns1:Logout");
	case SOAP_TYPE_PointerTo_ns1__GetGraphResponse:
		return soap_out_PointerTo_ns1__GetGraphResponse(soap, tag, id, (_ns1__GetGraphResponse *const*)ptr, "ns1:GetGraphResponse");
	case SOAP_TYPE_PointerTo_ns1__GetGraph:
		return soap_out_PointerTo_ns1__GetGraph(soap, tag, id, (_ns1__GetGraph *const*)ptr, "ns1:GetGraph");
	case SOAP_TYPE_PointerTo_ns1__LoginResponse:
		return soap_out_PointerTo_ns1__LoginResponse(soap, tag, id, (_ns1__LoginResponse *const*)ptr, "ns1:LoginResponse");
	case SOAP_TYPE_PointerTo_ns1__Login:
		return soap_out_PointerTo_ns1__Login(soap, tag, id, (_ns1__Login *const*)ptr, "ns1:Login");
	case SOAP_TYPE_PointerTons3__UserTagContract:
		return soap_out_PointerTons3__UserTagContract(soap, tag, id, (ns3__UserTagContract *const*)ptr, "ns3:UserTagContract");
	case SOAP_TYPE_PointerTons3__ConnectionTagContract:
		return soap_out_PointerTons3__ConnectionTagContract(soap, tag, id, (ns3__ConnectionTagContract *const*)ptr, "ns3:ConnectionTagContract");
	case SOAP_TYPE_PointerTons3__ConnectionContract:
		return soap_out_PointerTons3__ConnectionContract(soap, tag, id, (ns3__ConnectionContract *const*)ptr, "ns3:ConnectionContract");
	case SOAP_TYPE_PointerTons3__ArrayOfUserTagContract:
		return soap_out_PointerTons3__ArrayOfUserTagContract(soap, tag, id, (ns3__ArrayOfUserTagContract *const*)ptr, "ns3:ArrayOfUserTagContract");
	case SOAP_TYPE_PointerTons3__HumorContract:
		return soap_out_PointerTons3__HumorContract(soap, tag, id, (ns3__HumorContract *const*)ptr, "ns3:HumorContract");
	case SOAP_TYPE_PointerTons3__ArrayOfConnectionContract:
		return soap_out_PointerTons3__ArrayOfConnectionContract(soap, tag, id, (ns3__ArrayOfConnectionContract *const*)ptr, "ns3:ArrayOfConnectionContract");
	case SOAP_TYPE_PointerTons3__UserContract:
		return soap_out_PointerTons3__UserContract(soap, tag, id, (ns3__UserContract *const*)ptr, "ns3:UserContract");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns3__UserTagContract:
		((ns3__UserTagContract *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__ArrayOfUserTagContract:
		((ns3__ArrayOfUserTagContract *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__HumorContract:
		((ns3__HumorContract *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__ConnectionTagContract:
		((ns3__ConnectionTagContract *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__ConnectionContract:
		((ns3__ConnectionContract *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__ArrayOfConnectionContract:
		((ns3__ArrayOfConnectionContract *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__UserContract:
		((ns3__UserContract *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LogoutResponse:
		((_ns1__LogoutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Logout:
		((_ns1__Logout *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetGraphResponse:
		((_ns1__GetGraphResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetGraph:
		((_ns1__GetGraph *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LoginResponse:
		((_ns1__LoginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Login:
		((_ns1__Login *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__Logout:
		soap_serialize___ns1__Logout(soap, (const struct __ns1__Logout *)ptr);
		break;
	case SOAP_TYPE___ns1__GetGraph:
		soap_serialize___ns1__GetGraph(soap, (const struct __ns1__GetGraph *)ptr);
		break;
	case SOAP_TYPE___ns1__Login:
		soap_serialize___ns1__Login(soap, (const struct __ns1__Login *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LogoutResponse:
		soap_serialize_PointerTo_ns1__LogoutResponse(soap, (_ns1__LogoutResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Logout:
		soap_serialize_PointerTo_ns1__Logout(soap, (_ns1__Logout *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetGraphResponse:
		soap_serialize_PointerTo_ns1__GetGraphResponse(soap, (_ns1__GetGraphResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetGraph:
		soap_serialize_PointerTo_ns1__GetGraph(soap, (_ns1__GetGraph *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LoginResponse:
		soap_serialize_PointerTo_ns1__LoginResponse(soap, (_ns1__LoginResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Login:
		soap_serialize_PointerTo_ns1__Login(soap, (_ns1__Login *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__UserTagContract:
		soap_serialize_PointerTons3__UserTagContract(soap, (ns3__UserTagContract *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__ConnectionTagContract:
		soap_serialize_PointerTons3__ConnectionTagContract(soap, (ns3__ConnectionTagContract *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__ConnectionContract:
		soap_serialize_PointerTons3__ConnectionContract(soap, (ns3__ConnectionContract *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__ArrayOfUserTagContract:
		soap_serialize_PointerTons3__ArrayOfUserTagContract(soap, (ns3__ArrayOfUserTagContract *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__HumorContract:
		soap_serialize_PointerTons3__HumorContract(soap, (ns3__HumorContract *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__ArrayOfConnectionContract:
		soap_serialize_PointerTons3__ArrayOfConnectionContract(soap, (ns3__ArrayOfConnectionContract *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__UserContract:
		soap_serialize_PointerTons3__UserContract(soap, (ns3__UserContract *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Login:
		return (void*)soap_instantiate__ns1__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LoginResponse:
		return (void*)soap_instantiate__ns1__LoginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetGraph:
		return (void*)soap_instantiate__ns1__GetGraph(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetGraphResponse:
		return (void*)soap_instantiate__ns1__GetGraphResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Logout:
		return (void*)soap_instantiate__ns1__Logout(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LogoutResponse:
		return (void*)soap_instantiate__ns1__LogoutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__UserContract:
		return (void*)soap_instantiate_ns3__UserContract(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__ArrayOfConnectionContract:
		return (void*)soap_instantiate_ns3__ArrayOfConnectionContract(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__ConnectionContract:
		return (void*)soap_instantiate_ns3__ConnectionContract(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__ConnectionTagContract:
		return (void*)soap_instantiate_ns3__ConnectionTagContract(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__HumorContract:
		return (void*)soap_instantiate_ns3__HumorContract(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__ArrayOfUserTagContract:
		return (void*)soap_instantiate_ns3__ArrayOfUserTagContract(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__UserTagContract:
		return (void*)soap_instantiate_ns3__UserTagContract(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Login:
		return (void*)soap_instantiate___ns1__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetGraph:
		return (void*)soap_instantiate___ns1__GetGraph(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Logout:
		return (void*)soap_instantiate___ns1__Logout(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__UserTagContract:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons3__UserTagContract(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__ConnectionContract:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons3__ConnectionContract(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Login:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Login*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LoginResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LoginResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LoginResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetGraph:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetGraph*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetGraph*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetGraphResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetGraphResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetGraphResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Logout:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Logout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Logout*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LogoutResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LogoutResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LogoutResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns3__UserContract:
		if (p->size < 0)
			SOAP_DELETE((ns3__UserContract*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__UserContract*)p->ptr);
		break;
	case SOAP_TYPE_ns3__ArrayOfConnectionContract:
		if (p->size < 0)
			SOAP_DELETE((ns3__ArrayOfConnectionContract*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__ArrayOfConnectionContract*)p->ptr);
		break;
	case SOAP_TYPE_ns3__ConnectionContract:
		if (p->size < 0)
			SOAP_DELETE((ns3__ConnectionContract*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__ConnectionContract*)p->ptr);
		break;
	case SOAP_TYPE_ns3__ConnectionTagContract:
		if (p->size < 0)
			SOAP_DELETE((ns3__ConnectionTagContract*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__ConnectionTagContract*)p->ptr);
		break;
	case SOAP_TYPE_ns3__HumorContract:
		if (p->size < 0)
			SOAP_DELETE((ns3__HumorContract*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__HumorContract*)p->ptr);
		break;
	case SOAP_TYPE_ns3__ArrayOfUserTagContract:
		if (p->size < 0)
			SOAP_DELETE((ns3__ArrayOfUserTagContract*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__ArrayOfUserTagContract*)p->ptr);
		break;
	case SOAP_TYPE_ns3__UserTagContract:
		if (p->size < 0)
			SOAP_DELETE((ns3__UserTagContract*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__UserTagContract*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Login:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Login*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetGraph:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetGraph*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetGraph*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Logout:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Logout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Logout*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__UserTagContract:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns3__UserTagContract * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns3__UserTagContract * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__ConnectionContract:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns3__ConnectionContract * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns3__ConnectionContract * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__UserTagContract:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns3__UserTagContract * >*)p)[len] = *(ns3__UserTagContract **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__ConnectionContract:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns3__ConnectionContract * >*)p)[len] = *(ns3__ConnectionContract **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns3__UserTagContract::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__UserTagContract::Id = NULL;
	this->ns3__UserTagContract::UserTagName = NULL;
	/* transient soap skipped */
}

void ns3__UserTagContract::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->ns3__UserTagContract::Id);
	soap_serialize_PointerTostd__string(soap, &this->ns3__UserTagContract::UserTagName);
	/* transient soap skipped */
#endif
}

int ns3__UserTagContract::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__UserTagContract(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserTagContract(struct soap *soap, const char *tag, int id, const ns3__UserTagContract *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__UserTagContract), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:Id", -1, &(a->ns3__UserTagContract::Id), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:UserTagName", -1, &(a->ns3__UserTagContract::UserTagName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__UserTagContract::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__UserTagContract(soap, tag, this, type);
}

SOAP_FMAC3 ns3__UserTagContract * SOAP_FMAC4 soap_in_ns3__UserTagContract(struct soap *soap, const char *tag, ns3__UserTagContract *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__UserTagContract *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__UserTagContract, sizeof(ns3__UserTagContract), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__UserTagContract)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__UserTagContract *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_UserTagName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:Id", &(a->ns3__UserTagContract::Id), "xsd:int"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_UserTagName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:UserTagName", &(a->ns3__UserTagContract::UserTagName), "xsd:string"))
				{	soap_flag_UserTagName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__UserTagContract *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__UserTagContract, 0, sizeof(ns3__UserTagContract), 0, soap_copy_ns3__UserTagContract);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__UserTagContract::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__UserTagContract);
	if (this->soap_out(soap, tag?tag:"ns3:UserTagContract", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__UserTagContract::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__UserTagContract(soap, this, tag, type);
}

SOAP_FMAC3 ns3__UserTagContract * SOAP_FMAC4 soap_get_ns3__UserTagContract(struct soap *soap, ns3__UserTagContract *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__UserTagContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__UserTagContract * SOAP_FMAC2 soap_instantiate_ns3__UserTagContract(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__UserTagContract(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__UserTagContract, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__UserTagContract);
		if (size)
			*size = sizeof(ns3__UserTagContract);
		((ns3__UserTagContract*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__UserTagContract, n);
		if (size)
			*size = n * sizeof(ns3__UserTagContract);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__UserTagContract*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__UserTagContract*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UserTagContract(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__UserTagContract %p -> %p\n", q, p));
	*(ns3__UserTagContract*)p = *(ns3__UserTagContract*)q;
}

void ns3__ArrayOfUserTagContract::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons3__UserTagContract(soap, &this->ns3__ArrayOfUserTagContract::UserTagContract);
	/* transient soap skipped */
}

void ns3__ArrayOfUserTagContract::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons3__UserTagContract(soap, &this->ns3__ArrayOfUserTagContract::UserTagContract);
	/* transient soap skipped */
#endif
}

int ns3__ArrayOfUserTagContract::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__ArrayOfUserTagContract(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfUserTagContract(struct soap *soap, const char *tag, int id, const ns3__ArrayOfUserTagContract *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__ArrayOfUserTagContract), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons3__UserTagContract(soap, "ns3:UserTagContract", -1, &(a->ns3__ArrayOfUserTagContract::UserTagContract), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__ArrayOfUserTagContract::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__ArrayOfUserTagContract(soap, tag, this, type);
}

SOAP_FMAC3 ns3__ArrayOfUserTagContract * SOAP_FMAC4 soap_in_ns3__ArrayOfUserTagContract(struct soap *soap, const char *tag, ns3__ArrayOfUserTagContract *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__ArrayOfUserTagContract *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__ArrayOfUserTagContract, sizeof(ns3__ArrayOfUserTagContract), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__ArrayOfUserTagContract)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__ArrayOfUserTagContract *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons3__UserTagContract(soap, "ns3:UserTagContract", &(a->ns3__ArrayOfUserTagContract::UserTagContract), "ns3:UserTagContract"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__ArrayOfUserTagContract *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__ArrayOfUserTagContract, 0, sizeof(ns3__ArrayOfUserTagContract), 0, soap_copy_ns3__ArrayOfUserTagContract);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__ArrayOfUserTagContract::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__ArrayOfUserTagContract);
	if (this->soap_out(soap, tag?tag:"ns3:ArrayOfUserTagContract", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__ArrayOfUserTagContract::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__ArrayOfUserTagContract(soap, this, tag, type);
}

SOAP_FMAC3 ns3__ArrayOfUserTagContract * SOAP_FMAC4 soap_get_ns3__ArrayOfUserTagContract(struct soap *soap, ns3__ArrayOfUserTagContract *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__ArrayOfUserTagContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__ArrayOfUserTagContract * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfUserTagContract(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__ArrayOfUserTagContract(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__ArrayOfUserTagContract, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__ArrayOfUserTagContract);
		if (size)
			*size = sizeof(ns3__ArrayOfUserTagContract);
		((ns3__ArrayOfUserTagContract*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__ArrayOfUserTagContract, n);
		if (size)
			*size = n * sizeof(ns3__ArrayOfUserTagContract);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__ArrayOfUserTagContract*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__ArrayOfUserTagContract*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ArrayOfUserTagContract(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__ArrayOfUserTagContract %p -> %p\n", q, p));
	*(ns3__ArrayOfUserTagContract*)p = *(ns3__ArrayOfUserTagContract*)q;
}

void ns3__HumorContract::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__HumorContract::HumorName = NULL;
	this->ns3__HumorContract::Id = NULL;
	/* transient soap skipped */
}

void ns3__HumorContract::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns3__HumorContract::HumorName);
	soap_serialize_PointerToint(soap, &this->ns3__HumorContract::Id);
	/* transient soap skipped */
#endif
}

int ns3__HumorContract::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__HumorContract(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__HumorContract(struct soap *soap, const char *tag, int id, const ns3__HumorContract *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__HumorContract), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:HumorName", -1, &(a->ns3__HumorContract::HumorName), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:Id", -1, &(a->ns3__HumorContract::Id), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__HumorContract::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__HumorContract(soap, tag, this, type);
}

SOAP_FMAC3 ns3__HumorContract * SOAP_FMAC4 soap_in_ns3__HumorContract(struct soap *soap, const char *tag, ns3__HumorContract *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__HumorContract *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__HumorContract, sizeof(ns3__HumorContract), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__HumorContract)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__HumorContract *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_HumorName1 = 1;
	size_t soap_flag_Id1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_HumorName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:HumorName", &(a->ns3__HumorContract::HumorName), "xsd:string"))
				{	soap_flag_HumorName1--;
					continue;
				}
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:Id", &(a->ns3__HumorContract::Id), "xsd:int"))
				{	soap_flag_Id1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__HumorContract *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__HumorContract, 0, sizeof(ns3__HumorContract), 0, soap_copy_ns3__HumorContract);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__HumorContract::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__HumorContract);
	if (this->soap_out(soap, tag?tag:"ns3:HumorContract", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__HumorContract::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__HumorContract(soap, this, tag, type);
}

SOAP_FMAC3 ns3__HumorContract * SOAP_FMAC4 soap_get_ns3__HumorContract(struct soap *soap, ns3__HumorContract *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__HumorContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__HumorContract * SOAP_FMAC2 soap_instantiate_ns3__HumorContract(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__HumorContract(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__HumorContract, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__HumorContract);
		if (size)
			*size = sizeof(ns3__HumorContract);
		((ns3__HumorContract*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__HumorContract, n);
		if (size)
			*size = n * sizeof(ns3__HumorContract);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__HumorContract*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__HumorContract*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__HumorContract(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__HumorContract %p -> %p\n", q, p));
	*(ns3__HumorContract*)p = *(ns3__HumorContract*)q;
}

void ns3__ConnectionTagContract::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__ConnectionTagContract::ConnectionTagName = NULL;
	this->ns3__ConnectionTagContract::Id = NULL;
	/* transient soap skipped */
}

void ns3__ConnectionTagContract::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns3__ConnectionTagContract::ConnectionTagName);
	soap_serialize_PointerToint(soap, &this->ns3__ConnectionTagContract::Id);
	/* transient soap skipped */
#endif
}

int ns3__ConnectionTagContract::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__ConnectionTagContract(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ConnectionTagContract(struct soap *soap, const char *tag, int id, const ns3__ConnectionTagContract *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__ConnectionTagContract), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:ConnectionTagName", -1, &(a->ns3__ConnectionTagContract::ConnectionTagName), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:Id", -1, &(a->ns3__ConnectionTagContract::Id), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__ConnectionTagContract::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__ConnectionTagContract(soap, tag, this, type);
}

SOAP_FMAC3 ns3__ConnectionTagContract * SOAP_FMAC4 soap_in_ns3__ConnectionTagContract(struct soap *soap, const char *tag, ns3__ConnectionTagContract *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__ConnectionTagContract *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__ConnectionTagContract, sizeof(ns3__ConnectionTagContract), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__ConnectionTagContract)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__ConnectionTagContract *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ConnectionTagName1 = 1;
	size_t soap_flag_Id1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ConnectionTagName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:ConnectionTagName", &(a->ns3__ConnectionTagContract::ConnectionTagName), "xsd:string"))
				{	soap_flag_ConnectionTagName1--;
					continue;
				}
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:Id", &(a->ns3__ConnectionTagContract::Id), "xsd:int"))
				{	soap_flag_Id1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__ConnectionTagContract *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__ConnectionTagContract, 0, sizeof(ns3__ConnectionTagContract), 0, soap_copy_ns3__ConnectionTagContract);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__ConnectionTagContract::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__ConnectionTagContract);
	if (this->soap_out(soap, tag?tag:"ns3:ConnectionTagContract", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__ConnectionTagContract::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__ConnectionTagContract(soap, this, tag, type);
}

SOAP_FMAC3 ns3__ConnectionTagContract * SOAP_FMAC4 soap_get_ns3__ConnectionTagContract(struct soap *soap, ns3__ConnectionTagContract *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__ConnectionTagContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__ConnectionTagContract * SOAP_FMAC2 soap_instantiate_ns3__ConnectionTagContract(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__ConnectionTagContract(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__ConnectionTagContract, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__ConnectionTagContract);
		if (size)
			*size = sizeof(ns3__ConnectionTagContract);
		((ns3__ConnectionTagContract*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__ConnectionTagContract, n);
		if (size)
			*size = n * sizeof(ns3__ConnectionTagContract);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__ConnectionTagContract*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__ConnectionTagContract*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ConnectionTagContract(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__ConnectionTagContract %p -> %p\n", q, p));
	*(ns3__ConnectionTagContract*)p = *(ns3__ConnectionTagContract*)q;
}

void ns3__ConnectionContract::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__ConnectionContract::ConnectionTag = NULL;
	this->ns3__ConnectionContract::Id = NULL;
	this->ns3__ConnectionContract::Strength = NULL;
	this->ns3__ConnectionContract::User = NULL;
	/* transient soap skipped */
}

void ns3__ConnectionContract::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__ConnectionTagContract(soap, &this->ns3__ConnectionContract::ConnectionTag);
	soap_serialize_PointerToint(soap, &this->ns3__ConnectionContract::Id);
	soap_serialize_PointerToint(soap, &this->ns3__ConnectionContract::Strength);
	soap_serialize_PointerTons3__UserContract(soap, &this->ns3__ConnectionContract::User);
	/* transient soap skipped */
#endif
}

int ns3__ConnectionContract::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__ConnectionContract(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ConnectionContract(struct soap *soap, const char *tag, int id, const ns3__ConnectionContract *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__ConnectionContract), type))
		return soap->error;
	if (soap_out_PointerTons3__ConnectionTagContract(soap, "ns3:ConnectionTag", -1, &(a->ns3__ConnectionContract::ConnectionTag), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:Id", -1, &(a->ns3__ConnectionContract::Id), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:Strength", -1, &(a->ns3__ConnectionContract::Strength), ""))
		return soap->error;
	if (soap_out_PointerTons3__UserContract(soap, "ns3:User", -1, &(a->ns3__ConnectionContract::User), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__ConnectionContract::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__ConnectionContract(soap, tag, this, type);
}

SOAP_FMAC3 ns3__ConnectionContract * SOAP_FMAC4 soap_in_ns3__ConnectionContract(struct soap *soap, const char *tag, ns3__ConnectionContract *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__ConnectionContract *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__ConnectionContract, sizeof(ns3__ConnectionContract), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__ConnectionContract)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__ConnectionContract *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ConnectionTag1 = 1;
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_Strength1 = 1;
	size_t soap_flag_User1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ConnectionTag1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__ConnectionTagContract(soap, "ns3:ConnectionTag", &(a->ns3__ConnectionContract::ConnectionTag), "ns3:ConnectionTagContract"))
				{	soap_flag_ConnectionTag1--;
					continue;
				}
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:Id", &(a->ns3__ConnectionContract::Id), "xsd:int"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_Strength1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:Strength", &(a->ns3__ConnectionContract::Strength), "xsd:int"))
				{	soap_flag_Strength1--;
					continue;
				}
			if (soap_flag_User1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__UserContract(soap, "ns3:User", &(a->ns3__ConnectionContract::User), "ns3:UserContract"))
				{	soap_flag_User1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__ConnectionContract *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__ConnectionContract, 0, sizeof(ns3__ConnectionContract), 0, soap_copy_ns3__ConnectionContract);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__ConnectionContract::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__ConnectionContract);
	if (this->soap_out(soap, tag?tag:"ns3:ConnectionContract", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__ConnectionContract::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__ConnectionContract(soap, this, tag, type);
}

SOAP_FMAC3 ns3__ConnectionContract * SOAP_FMAC4 soap_get_ns3__ConnectionContract(struct soap *soap, ns3__ConnectionContract *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__ConnectionContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__ConnectionContract * SOAP_FMAC2 soap_instantiate_ns3__ConnectionContract(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__ConnectionContract(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__ConnectionContract, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__ConnectionContract);
		if (size)
			*size = sizeof(ns3__ConnectionContract);
		((ns3__ConnectionContract*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__ConnectionContract, n);
		if (size)
			*size = n * sizeof(ns3__ConnectionContract);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__ConnectionContract*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__ConnectionContract*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ConnectionContract(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__ConnectionContract %p -> %p\n", q, p));
	*(ns3__ConnectionContract*)p = *(ns3__ConnectionContract*)q;
}

void ns3__ArrayOfConnectionContract::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons3__ConnectionContract(soap, &this->ns3__ArrayOfConnectionContract::ConnectionContract);
	/* transient soap skipped */
}

void ns3__ArrayOfConnectionContract::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons3__ConnectionContract(soap, &this->ns3__ArrayOfConnectionContract::ConnectionContract);
	/* transient soap skipped */
#endif
}

int ns3__ArrayOfConnectionContract::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__ArrayOfConnectionContract(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfConnectionContract(struct soap *soap, const char *tag, int id, const ns3__ArrayOfConnectionContract *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__ArrayOfConnectionContract), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons3__ConnectionContract(soap, "ns3:ConnectionContract", -1, &(a->ns3__ArrayOfConnectionContract::ConnectionContract), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__ArrayOfConnectionContract::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__ArrayOfConnectionContract(soap, tag, this, type);
}

SOAP_FMAC3 ns3__ArrayOfConnectionContract * SOAP_FMAC4 soap_in_ns3__ArrayOfConnectionContract(struct soap *soap, const char *tag, ns3__ArrayOfConnectionContract *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__ArrayOfConnectionContract *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__ArrayOfConnectionContract, sizeof(ns3__ArrayOfConnectionContract), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__ArrayOfConnectionContract)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__ArrayOfConnectionContract *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons3__ConnectionContract(soap, "ns3:ConnectionContract", &(a->ns3__ArrayOfConnectionContract::ConnectionContract), "ns3:ConnectionContract"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__ArrayOfConnectionContract *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__ArrayOfConnectionContract, 0, sizeof(ns3__ArrayOfConnectionContract), 0, soap_copy_ns3__ArrayOfConnectionContract);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__ArrayOfConnectionContract::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__ArrayOfConnectionContract);
	if (this->soap_out(soap, tag?tag:"ns3:ArrayOfConnectionContract", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__ArrayOfConnectionContract::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__ArrayOfConnectionContract(soap, this, tag, type);
}

SOAP_FMAC3 ns3__ArrayOfConnectionContract * SOAP_FMAC4 soap_get_ns3__ArrayOfConnectionContract(struct soap *soap, ns3__ArrayOfConnectionContract *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__ArrayOfConnectionContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__ArrayOfConnectionContract * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfConnectionContract(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__ArrayOfConnectionContract(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__ArrayOfConnectionContract, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__ArrayOfConnectionContract);
		if (size)
			*size = sizeof(ns3__ArrayOfConnectionContract);
		((ns3__ArrayOfConnectionContract*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__ArrayOfConnectionContract, n);
		if (size)
			*size = n * sizeof(ns3__ArrayOfConnectionContract);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__ArrayOfConnectionContract*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__ArrayOfConnectionContract*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ArrayOfConnectionContract(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__ArrayOfConnectionContract %p -> %p\n", q, p));
	*(ns3__ArrayOfConnectionContract*)p = *(ns3__ArrayOfConnectionContract*)q;
}

void ns3__UserContract::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__UserContract::Connections = NULL;
	this->ns3__UserContract::Email = NULL;
	this->ns3__UserContract::Humor = NULL;
	this->ns3__UserContract::UserTags = NULL;
	/* transient soap skipped */
}

void ns3__UserContract::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__ArrayOfConnectionContract(soap, &this->ns3__UserContract::Connections);
	soap_serialize_PointerTostd__string(soap, &this->ns3__UserContract::Email);
	soap_serialize_PointerTons3__HumorContract(soap, &this->ns3__UserContract::Humor);
	soap_serialize_PointerTons3__ArrayOfUserTagContract(soap, &this->ns3__UserContract::UserTags);
	/* transient soap skipped */
#endif
}

int ns3__UserContract::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__UserContract(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserContract(struct soap *soap, const char *tag, int id, const ns3__UserContract *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__UserContract), type))
		return soap->error;
	if (soap_out_PointerTons3__ArrayOfConnectionContract(soap, "ns3:Connections", -1, &(a->ns3__UserContract::Connections), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:Email", -1, &(a->ns3__UserContract::Email), ""))
		return soap->error;
	if (soap_out_PointerTons3__HumorContract(soap, "ns3:Humor", -1, &(a->ns3__UserContract::Humor), ""))
		return soap->error;
	if (soap_out_PointerTons3__ArrayOfUserTagContract(soap, "ns3:UserTags", -1, &(a->ns3__UserContract::UserTags), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__UserContract::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__UserContract(soap, tag, this, type);
}

SOAP_FMAC3 ns3__UserContract * SOAP_FMAC4 soap_in_ns3__UserContract(struct soap *soap, const char *tag, ns3__UserContract *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__UserContract *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__UserContract, sizeof(ns3__UserContract), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__UserContract)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__UserContract *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Connections1 = 1;
	size_t soap_flag_Email1 = 1;
	size_t soap_flag_Humor1 = 1;
	size_t soap_flag_UserTags1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Connections1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__ArrayOfConnectionContract(soap, "ns3:Connections", &(a->ns3__UserContract::Connections), "ns3:ArrayOfConnectionContract"))
				{	soap_flag_Connections1--;
					continue;
				}
			if (soap_flag_Email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:Email", &(a->ns3__UserContract::Email), "xsd:string"))
				{	soap_flag_Email1--;
					continue;
				}
			if (soap_flag_Humor1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__HumorContract(soap, "ns3:Humor", &(a->ns3__UserContract::Humor), "ns3:HumorContract"))
				{	soap_flag_Humor1--;
					continue;
				}
			if (soap_flag_UserTags1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__ArrayOfUserTagContract(soap, "ns3:UserTags", &(a->ns3__UserContract::UserTags), "ns3:ArrayOfUserTagContract"))
				{	soap_flag_UserTags1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__UserContract *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__UserContract, 0, sizeof(ns3__UserContract), 0, soap_copy_ns3__UserContract);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__UserContract::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__UserContract);
	if (this->soap_out(soap, tag?tag:"ns3:UserContract", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__UserContract::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__UserContract(soap, this, tag, type);
}

SOAP_FMAC3 ns3__UserContract * SOAP_FMAC4 soap_get_ns3__UserContract(struct soap *soap, ns3__UserContract *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__UserContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__UserContract * SOAP_FMAC2 soap_instantiate_ns3__UserContract(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__UserContract(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__UserContract, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__UserContract);
		if (size)
			*size = sizeof(ns3__UserContract);
		((ns3__UserContract*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__UserContract, n);
		if (size)
			*size = n * sizeof(ns3__UserContract);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__UserContract*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__UserContract*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UserContract(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__UserContract %p -> %p\n", q, p));
	*(ns3__UserContract*)p = *(ns3__UserContract*)q;
}

void _ns1__LogoutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__LogoutResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__LogoutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LogoutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LogoutResponse(struct soap *soap, const char *tag, int id, const _ns1__LogoutResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LogoutResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LogoutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LogoutResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LogoutResponse * SOAP_FMAC4 soap_in__ns1__LogoutResponse(struct soap *soap, const char *tag, _ns1__LogoutResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LogoutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LogoutResponse, sizeof(_ns1__LogoutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LogoutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LogoutResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LogoutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LogoutResponse, 0, sizeof(_ns1__LogoutResponse), 0, soap_copy__ns1__LogoutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LogoutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LogoutResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LogoutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LogoutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LogoutResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LogoutResponse * SOAP_FMAC4 soap_get__ns1__LogoutResponse(struct soap *soap, _ns1__LogoutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LogoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LogoutResponse * SOAP_FMAC2 soap_instantiate__ns1__LogoutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LogoutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LogoutResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LogoutResponse);
		if (size)
			*size = sizeof(_ns1__LogoutResponse);
		((_ns1__LogoutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LogoutResponse, n);
		if (size)
			*size = n * sizeof(_ns1__LogoutResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LogoutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LogoutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LogoutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LogoutResponse %p -> %p\n", q, p));
	*(_ns1__LogoutResponse*)p = *(_ns1__LogoutResponse*)q;
}

void _ns1__Logout::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Logout::Token = NULL;
	/* transient soap skipped */
}

void _ns1__Logout::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Logout::Token);
	/* transient soap skipped */
#endif
}

int _ns1__Logout::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Logout(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Logout(struct soap *soap, const char *tag, int id, const _ns1__Logout *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Logout), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Token", -1, &(a->_ns1__Logout::Token), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Logout::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Logout(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Logout * SOAP_FMAC4 soap_in__ns1__Logout(struct soap *soap, const char *tag, _ns1__Logout *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Logout *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Logout, sizeof(_ns1__Logout), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Logout)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Logout *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Token1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Token1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:Token", &(a->_ns1__Logout::Token), "xsd:string"))
				{	soap_flag_Token1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Logout *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Logout, 0, sizeof(_ns1__Logout), 0, soap_copy__ns1__Logout);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__Logout::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Logout);
	if (this->soap_out(soap, tag?tag:"ns1:Logout", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Logout::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Logout(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Logout * SOAP_FMAC4 soap_get__ns1__Logout(struct soap *soap, _ns1__Logout *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Logout * SOAP_FMAC2 soap_instantiate__ns1__Logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Logout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Logout, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Logout);
		if (size)
			*size = sizeof(_ns1__Logout);
		((_ns1__Logout*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Logout, n);
		if (size)
			*size = n * sizeof(_ns1__Logout);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Logout*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Logout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Logout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Logout %p -> %p\n", q, p));
	*(_ns1__Logout*)p = *(_ns1__Logout*)q;
}

void _ns1__GetGraphResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetGraphResponse::GetGraphResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetGraphResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__UserContract(soap, &this->_ns1__GetGraphResponse::GetGraphResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetGraphResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetGraphResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGraphResponse(struct soap *soap, const char *tag, int id, const _ns1__GetGraphResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetGraphResponse), type))
		return soap->error;
	if (a->GetGraphResult)
		soap_element_result(soap, "ns1:GetGraphResult");
	if (soap_out_PointerTons3__UserContract(soap, "ns1:GetGraphResult", -1, &(a->_ns1__GetGraphResponse::GetGraphResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetGraphResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetGraphResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetGraphResponse * SOAP_FMAC4 soap_in__ns1__GetGraphResponse(struct soap *soap, const char *tag, _ns1__GetGraphResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetGraphResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetGraphResponse, sizeof(_ns1__GetGraphResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetGraphResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetGraphResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetGraphResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetGraphResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__UserContract(soap, "ns1:GetGraphResult", &(a->_ns1__GetGraphResponse::GetGraphResult), "ns3:UserContract"))
				{	soap_flag_GetGraphResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetGraphResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetGraphResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetGraphResponse, 0, sizeof(_ns1__GetGraphResponse), 0, soap_copy__ns1__GetGraphResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetGraphResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetGraphResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetGraphResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetGraphResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetGraphResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetGraphResponse * SOAP_FMAC4 soap_get__ns1__GetGraphResponse(struct soap *soap, _ns1__GetGraphResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetGraphResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetGraphResponse * SOAP_FMAC2 soap_instantiate__ns1__GetGraphResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetGraphResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetGraphResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetGraphResponse);
		if (size)
			*size = sizeof(_ns1__GetGraphResponse);
		((_ns1__GetGraphResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetGraphResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetGraphResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetGraphResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetGraphResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetGraphResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetGraphResponse %p -> %p\n", q, p));
	*(_ns1__GetGraphResponse*)p = *(_ns1__GetGraphResponse*)q;
}

void _ns1__GetGraph::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetGraph::Token = NULL;
	this->_ns1__GetGraph::Email = NULL;
	this->_ns1__GetGraph::graphDepth = NULL;
	/* transient soap skipped */
}

void _ns1__GetGraph::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetGraph::Token);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetGraph::Email);
	soap_serialize_PointerToint(soap, &this->_ns1__GetGraph::graphDepth);
	/* transient soap skipped */
#endif
}

int _ns1__GetGraph::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetGraph(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGraph(struct soap *soap, const char *tag, int id, const _ns1__GetGraph *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetGraph), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Token", -1, &(a->_ns1__GetGraph::Token), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Email", -1, &(a->_ns1__GetGraph::Email), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:graphDepth", -1, &(a->_ns1__GetGraph::graphDepth), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetGraph::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetGraph(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetGraph * SOAP_FMAC4 soap_in__ns1__GetGraph(struct soap *soap, const char *tag, _ns1__GetGraph *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetGraph *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetGraph, sizeof(_ns1__GetGraph), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetGraph)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetGraph *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Token1 = 1;
	size_t soap_flag_Email1 = 1;
	size_t soap_flag_graphDepth1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Token1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:Token", &(a->_ns1__GetGraph::Token), "xsd:string"))
				{	soap_flag_Token1--;
					continue;
				}
			if (soap_flag_Email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:Email", &(a->_ns1__GetGraph::Email), "xsd:string"))
				{	soap_flag_Email1--;
					continue;
				}
			if (soap_flag_graphDepth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:graphDepth", &(a->_ns1__GetGraph::graphDepth), "xsd:int"))
				{	soap_flag_graphDepth1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetGraph *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetGraph, 0, sizeof(_ns1__GetGraph), 0, soap_copy__ns1__GetGraph);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetGraph::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetGraph);
	if (this->soap_out(soap, tag?tag:"ns1:GetGraph", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetGraph::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetGraph(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetGraph * SOAP_FMAC4 soap_get__ns1__GetGraph(struct soap *soap, _ns1__GetGraph *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetGraph(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetGraph * SOAP_FMAC2 soap_instantiate__ns1__GetGraph(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetGraph(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetGraph, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetGraph);
		if (size)
			*size = sizeof(_ns1__GetGraph);
		((_ns1__GetGraph*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetGraph, n);
		if (size)
			*size = n * sizeof(_ns1__GetGraph);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetGraph*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetGraph*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetGraph(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetGraph %p -> %p\n", q, p));
	*(_ns1__GetGraph*)p = *(_ns1__GetGraph*)q;
}

void _ns1__LoginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LoginResponse::LoginResult = NULL;
	/* transient soap skipped */
}

void _ns1__LoginResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__LoginResponse::LoginResult);
	/* transient soap skipped */
#endif
}

int _ns1__LoginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LoginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginResponse(struct soap *soap, const char *tag, int id, const _ns1__LoginResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LoginResponse), type))
		return soap->error;
	if (a->LoginResult)
		soap_element_result(soap, "ns1:LoginResult");
	if (soap_out_PointerTostd__string(soap, "ns1:LoginResult", -1, &(a->_ns1__LoginResponse::LoginResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LoginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LoginResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_in__ns1__LoginResponse(struct soap *soap, const char *tag, _ns1__LoginResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LoginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LoginResponse, sizeof(_ns1__LoginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LoginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LoginResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LoginResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LoginResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:LoginResult", &(a->_ns1__LoginResponse::LoginResult), "xsd:string"))
				{	soap_flag_LoginResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LoginResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LoginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LoginResponse, 0, sizeof(_ns1__LoginResponse), 0, soap_copy__ns1__LoginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LoginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LoginResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LoginResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LoginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LoginResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_get__ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LoginResponse * SOAP_FMAC2 soap_instantiate__ns1__LoginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LoginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LoginResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LoginResponse);
		if (size)
			*size = sizeof(_ns1__LoginResponse);
		((_ns1__LoginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LoginResponse, n);
		if (size)
			*size = n * sizeof(_ns1__LoginResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LoginResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LoginResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LoginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LoginResponse %p -> %p\n", q, p));
	*(_ns1__LoginResponse*)p = *(_ns1__LoginResponse*)q;
}

void _ns1__Login::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Login::Email = NULL;
	this->_ns1__Login::Password = NULL;
	/* transient soap skipped */
}

void _ns1__Login::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Login::Email);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Login::Password);
	/* transient soap skipped */
#endif
}

int _ns1__Login::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Login(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Login(struct soap *soap, const char *tag, int id, const _ns1__Login *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Login), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Email", -1, &(a->_ns1__Login::Email), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Password", -1, &(a->_ns1__Login::Password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Login::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Login(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_in__ns1__Login(struct soap *soap, const char *tag, _ns1__Login *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Login, sizeof(_ns1__Login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Login)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Login *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Email1 = 1;
	size_t soap_flag_Password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:Email", &(a->_ns1__Login::Email), "xsd:string"))
				{	soap_flag_Email1--;
					continue;
				}
			if (soap_flag_Password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:Password", &(a->_ns1__Login::Password), "xsd:string"))
				{	soap_flag_Password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Login, 0, sizeof(_ns1__Login), 0, soap_copy__ns1__Login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__Login::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Login);
	if (this->soap_out(soap, tag?tag:"ns1:Login", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Login::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Login(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_get__ns1__Login(struct soap *soap, _ns1__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Login * SOAP_FMAC2 soap_instantiate__ns1__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Login);
		if (size)
			*size = sizeof(_ns1__Login);
		((_ns1__Login*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Login, n);
		if (size)
			*size = n * sizeof(_ns1__Login);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Login*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Login %p -> %p\n", q, p));
	*(_ns1__Login*)p = *(_ns1__Login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Logout(struct soap *soap, struct __ns1__Logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Logout = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Logout(struct soap *soap, const struct __ns1__Logout *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Logout(soap, &a->ns1__Logout);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Logout(struct soap *soap, const char *tag, int id, const struct __ns1__Logout *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Logout(soap, "ns1:Logout", -1, &a->ns1__Logout, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Logout * SOAP_FMAC4 soap_in___ns1__Logout(struct soap *soap, const char *tag, struct __ns1__Logout *a, const char *type)
{
	size_t soap_flag_ns1__Logout = 1;
	short soap_flag;
	a = (struct __ns1__Logout *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Logout, sizeof(struct __ns1__Logout), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Logout(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Logout && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Logout(soap, "ns1:Logout", &a->ns1__Logout, ""))
				{	soap_flag_ns1__Logout--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Logout(struct soap *soap, const struct __ns1__Logout *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Logout(soap, tag?tag:"-ns1:Logout", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Logout * SOAP_FMAC4 soap_get___ns1__Logout(struct soap *soap, struct __ns1__Logout *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Logout * SOAP_FMAC2 soap_instantiate___ns1__Logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Logout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Logout, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Logout);
		if (size)
			*size = sizeof(struct __ns1__Logout);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Logout, n);
		if (size)
			*size = n * sizeof(struct __ns1__Logout);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Logout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Logout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Logout %p -> %p\n", q, p));
	*(struct __ns1__Logout*)p = *(struct __ns1__Logout*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetGraph(struct soap *soap, struct __ns1__GetGraph *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetGraph = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetGraph(struct soap *soap, const struct __ns1__GetGraph *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetGraph(soap, &a->ns1__GetGraph);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetGraph(struct soap *soap, const char *tag, int id, const struct __ns1__GetGraph *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetGraph(soap, "ns1:GetGraph", -1, &a->ns1__GetGraph, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetGraph * SOAP_FMAC4 soap_in___ns1__GetGraph(struct soap *soap, const char *tag, struct __ns1__GetGraph *a, const char *type)
{
	size_t soap_flag_ns1__GetGraph = 1;
	short soap_flag;
	a = (struct __ns1__GetGraph *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetGraph, sizeof(struct __ns1__GetGraph), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetGraph(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetGraph && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetGraph(soap, "ns1:GetGraph", &a->ns1__GetGraph, ""))
				{	soap_flag_ns1__GetGraph--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetGraph(struct soap *soap, const struct __ns1__GetGraph *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetGraph(soap, tag?tag:"-ns1:GetGraph", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetGraph * SOAP_FMAC4 soap_get___ns1__GetGraph(struct soap *soap, struct __ns1__GetGraph *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetGraph(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetGraph * SOAP_FMAC2 soap_instantiate___ns1__GetGraph(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetGraph(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetGraph, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetGraph);
		if (size)
			*size = sizeof(struct __ns1__GetGraph);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetGraph, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetGraph);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetGraph*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetGraph(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetGraph %p -> %p\n", q, p));
	*(struct __ns1__GetGraph*)p = *(struct __ns1__GetGraph*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login(struct soap *soap, struct __ns1__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login(struct soap *soap, const struct __ns1__Login *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Login(soap, &a->ns1__Login);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login(struct soap *soap, const char *tag, int id, const struct __ns1__Login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Login(soap, "ns1:Login", -1, &a->ns1__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_in___ns1__Login(struct soap *soap, const char *tag, struct __ns1__Login *a, const char *type)
{
	size_t soap_flag_ns1__Login = 1;
	short soap_flag;
	a = (struct __ns1__Login *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Login, sizeof(struct __ns1__Login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Login(soap, "ns1:Login", &a->ns1__Login, ""))
				{	soap_flag_ns1__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login(struct soap *soap, const struct __ns1__Login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Login(soap, tag?tag:"-ns1:Login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_get___ns1__Login(struct soap *soap, struct __ns1__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Login * SOAP_FMAC2 soap_instantiate___ns1__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Login);
		if (size)
			*size = sizeof(struct __ns1__Login);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Login, n);
		if (size)
			*size = n * sizeof(struct __ns1__Login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Login %p -> %p\n", q, p));
	*(struct __ns1__Login*)p = *(struct __ns1__Login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LogoutResponse(struct soap *soap, _ns1__LogoutResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LogoutResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LogoutResponse(struct soap *soap, const char *tag, int id, _ns1__LogoutResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LogoutResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LogoutResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__LogoutResponse(struct soap *soap, const char *tag, _ns1__LogoutResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LogoutResponse **)soap_malloc(soap, sizeof(_ns1__LogoutResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LogoutResponse *)soap_instantiate__ns1__LogoutResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LogoutResponse ** p = (_ns1__LogoutResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LogoutResponse, sizeof(_ns1__LogoutResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LogoutResponse(struct soap *soap, _ns1__LogoutResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LogoutResponse);
	if (soap_out_PointerTo_ns1__LogoutResponse(soap, tag?tag:"ns1:LogoutResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LogoutResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__LogoutResponse(struct soap *soap, _ns1__LogoutResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LogoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Logout(struct soap *soap, _ns1__Logout *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Logout))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Logout(struct soap *soap, const char *tag, int id, _ns1__Logout *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Logout);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Logout ** SOAP_FMAC4 soap_in_PointerTo_ns1__Logout(struct soap *soap, const char *tag, _ns1__Logout **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Logout **)soap_malloc(soap, sizeof(_ns1__Logout *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Logout *)soap_instantiate__ns1__Logout(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Logout ** p = (_ns1__Logout **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Logout, sizeof(_ns1__Logout), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Logout(struct soap *soap, _ns1__Logout *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Logout);
	if (soap_out_PointerTo_ns1__Logout(soap, tag?tag:"ns1:Logout", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Logout ** SOAP_FMAC4 soap_get_PointerTo_ns1__Logout(struct soap *soap, _ns1__Logout **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetGraphResponse(struct soap *soap, _ns1__GetGraphResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetGraphResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetGraphResponse(struct soap *soap, const char *tag, int id, _ns1__GetGraphResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetGraphResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetGraphResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetGraphResponse(struct soap *soap, const char *tag, _ns1__GetGraphResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetGraphResponse **)soap_malloc(soap, sizeof(_ns1__GetGraphResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetGraphResponse *)soap_instantiate__ns1__GetGraphResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetGraphResponse ** p = (_ns1__GetGraphResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetGraphResponse, sizeof(_ns1__GetGraphResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetGraphResponse(struct soap *soap, _ns1__GetGraphResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetGraphResponse);
	if (soap_out_PointerTo_ns1__GetGraphResponse(soap, tag?tag:"ns1:GetGraphResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetGraphResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetGraphResponse(struct soap *soap, _ns1__GetGraphResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetGraphResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetGraph(struct soap *soap, _ns1__GetGraph *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetGraph))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetGraph(struct soap *soap, const char *tag, int id, _ns1__GetGraph *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetGraph);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetGraph ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetGraph(struct soap *soap, const char *tag, _ns1__GetGraph **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetGraph **)soap_malloc(soap, sizeof(_ns1__GetGraph *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetGraph *)soap_instantiate__ns1__GetGraph(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetGraph ** p = (_ns1__GetGraph **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetGraph, sizeof(_ns1__GetGraph), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetGraph(struct soap *soap, _ns1__GetGraph *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetGraph);
	if (soap_out_PointerTo_ns1__GetGraph(soap, tag?tag:"ns1:GetGraph", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetGraph ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetGraph(struct soap *soap, _ns1__GetGraph **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetGraph(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LoginResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LoginResponse(struct soap *soap, const char *tag, int id, _ns1__LoginResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LoginResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LoginResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__LoginResponse(struct soap *soap, const char *tag, _ns1__LoginResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LoginResponse **)soap_malloc(soap, sizeof(_ns1__LoginResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LoginResponse *)soap_instantiate__ns1__LoginResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LoginResponse ** p = (_ns1__LoginResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LoginResponse, sizeof(_ns1__LoginResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LoginResponse);
	if (soap_out_PointerTo_ns1__LoginResponse(soap, tag?tag:"ns1:LoginResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LoginResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Login(struct soap *soap, _ns1__Login *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Login))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Login(struct soap *soap, const char *tag, int id, _ns1__Login *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Login);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_in_PointerTo_ns1__Login(struct soap *soap, const char *tag, _ns1__Login **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Login **)soap_malloc(soap, sizeof(_ns1__Login *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Login *)soap_instantiate__ns1__Login(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Login ** p = (_ns1__Login **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Login, sizeof(_ns1__Login), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Login(struct soap *soap, _ns1__Login *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Login);
	if (soap_out_PointerTo_ns1__Login(soap, tag?tag:"ns1:Login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_get_PointerTo_ns1__Login(struct soap *soap, _ns1__Login **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserTagContract(struct soap *soap, ns3__UserTagContract *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__UserTagContract))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserTagContract(struct soap *soap, const char *tag, int id, ns3__UserTagContract *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__UserTagContract);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__UserTagContract ** SOAP_FMAC4 soap_in_PointerTons3__UserTagContract(struct soap *soap, const char *tag, ns3__UserTagContract **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__UserTagContract **)soap_malloc(soap, sizeof(ns3__UserTagContract *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__UserTagContract *)soap_instantiate_ns3__UserTagContract(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__UserTagContract ** p = (ns3__UserTagContract **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__UserTagContract, sizeof(ns3__UserTagContract), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserTagContract(struct soap *soap, ns3__UserTagContract *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__UserTagContract);
	if (soap_out_PointerTons3__UserTagContract(soap, tag?tag:"ns3:UserTagContract", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__UserTagContract ** SOAP_FMAC4 soap_get_PointerTons3__UserTagContract(struct soap *soap, ns3__UserTagContract **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__UserTagContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ConnectionTagContract(struct soap *soap, ns3__ConnectionTagContract *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__ConnectionTagContract))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ConnectionTagContract(struct soap *soap, const char *tag, int id, ns3__ConnectionTagContract *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__ConnectionTagContract);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__ConnectionTagContract ** SOAP_FMAC4 soap_in_PointerTons3__ConnectionTagContract(struct soap *soap, const char *tag, ns3__ConnectionTagContract **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__ConnectionTagContract **)soap_malloc(soap, sizeof(ns3__ConnectionTagContract *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__ConnectionTagContract *)soap_instantiate_ns3__ConnectionTagContract(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__ConnectionTagContract ** p = (ns3__ConnectionTagContract **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__ConnectionTagContract, sizeof(ns3__ConnectionTagContract), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ConnectionTagContract(struct soap *soap, ns3__ConnectionTagContract *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__ConnectionTagContract);
	if (soap_out_PointerTons3__ConnectionTagContract(soap, tag?tag:"ns3:ConnectionTagContract", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__ConnectionTagContract ** SOAP_FMAC4 soap_get_PointerTons3__ConnectionTagContract(struct soap *soap, ns3__ConnectionTagContract **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__ConnectionTagContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ConnectionContract(struct soap *soap, ns3__ConnectionContract *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__ConnectionContract))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ConnectionContract(struct soap *soap, const char *tag, int id, ns3__ConnectionContract *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__ConnectionContract);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__ConnectionContract ** SOAP_FMAC4 soap_in_PointerTons3__ConnectionContract(struct soap *soap, const char *tag, ns3__ConnectionContract **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__ConnectionContract **)soap_malloc(soap, sizeof(ns3__ConnectionContract *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__ConnectionContract *)soap_instantiate_ns3__ConnectionContract(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__ConnectionContract ** p = (ns3__ConnectionContract **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__ConnectionContract, sizeof(ns3__ConnectionContract), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ConnectionContract(struct soap *soap, ns3__ConnectionContract *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__ConnectionContract);
	if (soap_out_PointerTons3__ConnectionContract(soap, tag?tag:"ns3:ConnectionContract", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__ConnectionContract ** SOAP_FMAC4 soap_get_PointerTons3__ConnectionContract(struct soap *soap, ns3__ConnectionContract **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__ConnectionContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfUserTagContract(struct soap *soap, ns3__ArrayOfUserTagContract *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__ArrayOfUserTagContract))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfUserTagContract(struct soap *soap, const char *tag, int id, ns3__ArrayOfUserTagContract *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__ArrayOfUserTagContract);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__ArrayOfUserTagContract ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfUserTagContract(struct soap *soap, const char *tag, ns3__ArrayOfUserTagContract **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__ArrayOfUserTagContract **)soap_malloc(soap, sizeof(ns3__ArrayOfUserTagContract *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__ArrayOfUserTagContract *)soap_instantiate_ns3__ArrayOfUserTagContract(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__ArrayOfUserTagContract ** p = (ns3__ArrayOfUserTagContract **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__ArrayOfUserTagContract, sizeof(ns3__ArrayOfUserTagContract), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfUserTagContract(struct soap *soap, ns3__ArrayOfUserTagContract *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__ArrayOfUserTagContract);
	if (soap_out_PointerTons3__ArrayOfUserTagContract(soap, tag?tag:"ns3:ArrayOfUserTagContract", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__ArrayOfUserTagContract ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfUserTagContract(struct soap *soap, ns3__ArrayOfUserTagContract **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__ArrayOfUserTagContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__HumorContract(struct soap *soap, ns3__HumorContract *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__HumorContract))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__HumorContract(struct soap *soap, const char *tag, int id, ns3__HumorContract *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__HumorContract);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__HumorContract ** SOAP_FMAC4 soap_in_PointerTons3__HumorContract(struct soap *soap, const char *tag, ns3__HumorContract **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__HumorContract **)soap_malloc(soap, sizeof(ns3__HumorContract *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__HumorContract *)soap_instantiate_ns3__HumorContract(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__HumorContract ** p = (ns3__HumorContract **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__HumorContract, sizeof(ns3__HumorContract), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__HumorContract(struct soap *soap, ns3__HumorContract *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__HumorContract);
	if (soap_out_PointerTons3__HumorContract(soap, tag?tag:"ns3:HumorContract", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__HumorContract ** SOAP_FMAC4 soap_get_PointerTons3__HumorContract(struct soap *soap, ns3__HumorContract **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__HumorContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfConnectionContract(struct soap *soap, ns3__ArrayOfConnectionContract *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__ArrayOfConnectionContract))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfConnectionContract(struct soap *soap, const char *tag, int id, ns3__ArrayOfConnectionContract *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__ArrayOfConnectionContract);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__ArrayOfConnectionContract ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfConnectionContract(struct soap *soap, const char *tag, ns3__ArrayOfConnectionContract **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__ArrayOfConnectionContract **)soap_malloc(soap, sizeof(ns3__ArrayOfConnectionContract *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__ArrayOfConnectionContract *)soap_instantiate_ns3__ArrayOfConnectionContract(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__ArrayOfConnectionContract ** p = (ns3__ArrayOfConnectionContract **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__ArrayOfConnectionContract, sizeof(ns3__ArrayOfConnectionContract), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfConnectionContract(struct soap *soap, ns3__ArrayOfConnectionContract *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__ArrayOfConnectionContract);
	if (soap_out_PointerTons3__ArrayOfConnectionContract(soap, tag?tag:"ns3:ArrayOfConnectionContract", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__ArrayOfConnectionContract ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfConnectionContract(struct soap *soap, ns3__ArrayOfConnectionContract **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__ArrayOfConnectionContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserContract(struct soap *soap, ns3__UserContract *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__UserContract))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserContract(struct soap *soap, const char *tag, int id, ns3__UserContract *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__UserContract);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__UserContract ** SOAP_FMAC4 soap_in_PointerTons3__UserContract(struct soap *soap, const char *tag, ns3__UserContract **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__UserContract **)soap_malloc(soap, sizeof(ns3__UserContract *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__UserContract *)soap_instantiate_ns3__UserContract(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__UserContract ** p = (ns3__UserContract **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__UserContract, sizeof(ns3__UserContract), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserContract(struct soap *soap, ns3__UserContract *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__UserContract);
	if (soap_out_PointerTons3__UserContract(soap, tag?tag:"ns3:UserContract", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__UserContract ** SOAP_FMAC4 soap_get_PointerTons3__UserContract(struct soap *soap, ns3__UserContract **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__UserContract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__UserTagContract(struct soap *soap, std::vector<ns3__UserTagContract * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__UserTagContract(struct soap *soap, const std::vector<ns3__UserTagContract * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns3__UserTagContract * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons3__UserTagContract(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__UserTagContract(struct soap *soap, const char *tag, int id, const std::vector<ns3__UserTagContract * >*a, const char *type)
{
	for (std::vector<ns3__UserTagContract * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons3__UserTagContract(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns3__UserTagContract * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__UserTagContract(struct soap *soap, const char *tag, std::vector<ns3__UserTagContract * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns3__UserTagContract *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns3__UserTagContract, SOAP_TYPE_std__vectorTemplateOfPointerTons3__UserTagContract, sizeof(ns3__UserTagContract), 1))
				break;
			if (!soap_in_PointerTons3__UserTagContract(soap, tag, NULL, "ns3:UserTagContract"))
				break;
		}
		else if (!soap_in_PointerTons3__UserTagContract(soap, tag, &n, "ns3:UserTagContract"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons3__UserTagContract(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns3__UserTagContract * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__UserTagContract(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons3__UserTagContract(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons3__UserTagContract, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns3__UserTagContract * >);
		if (size)
			*size = sizeof(std::vector<ns3__UserTagContract * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns3__UserTagContract * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns3__UserTagContract * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns3__UserTagContract * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__UserTagContract(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns3__UserTagContract * > %p -> %p\n", q, p));
	*(std::vector<ns3__UserTagContract * >*)p = *(std::vector<ns3__UserTagContract * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ConnectionContract(struct soap *soap, std::vector<ns3__ConnectionContract * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ConnectionContract(struct soap *soap, const std::vector<ns3__ConnectionContract * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns3__ConnectionContract * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons3__ConnectionContract(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ConnectionContract(struct soap *soap, const char *tag, int id, const std::vector<ns3__ConnectionContract * >*a, const char *type)
{
	for (std::vector<ns3__ConnectionContract * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons3__ConnectionContract(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns3__ConnectionContract * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ConnectionContract(struct soap *soap, const char *tag, std::vector<ns3__ConnectionContract * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns3__ConnectionContract *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns3__ConnectionContract, SOAP_TYPE_std__vectorTemplateOfPointerTons3__ConnectionContract, sizeof(ns3__ConnectionContract), 1))
				break;
			if (!soap_in_PointerTons3__ConnectionContract(soap, tag, NULL, "ns3:ConnectionContract"))
				break;
		}
		else if (!soap_in_PointerTons3__ConnectionContract(soap, tag, &n, "ns3:ConnectionContract"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons3__ConnectionContract(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns3__ConnectionContract * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ConnectionContract(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons3__ConnectionContract(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons3__ConnectionContract, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns3__ConnectionContract * >);
		if (size)
			*size = sizeof(std::vector<ns3__ConnectionContract * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns3__ConnectionContract * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns3__ConnectionContract * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns3__ConnectionContract * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__ConnectionContract(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns3__ConnectionContract * > %p -> %p\n", q, p));
	*(std::vector<ns3__ConnectionContract * >*)p = *(std::vector<ns3__ConnectionContract * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
