/* soapC.cpp
   Generated by gSOAP 2.8.17 from stub/Service1.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.17 2013-12-17 19:16:33 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_arr__ArrayOfint:
		return soap_in_arr__ArrayOfint(soap, NULL, NULL, "arr:ArrayOfint");
	case SOAP_TYPE_ns5__User:
		return soap_in_ns5__User(soap, NULL, NULL, "ns5:User");
	case SOAP_TYPE_ns5__ArrayOfUser:
		return soap_in_ns5__ArrayOfUser(soap, NULL, NULL, "ns5:ArrayOfUser");
	case SOAP_TYPE_ns5__Relationship:
		return soap_in_ns5__Relationship(soap, NULL, NULL, "ns5:Relationship");
	case SOAP_TYPE_ns5__ArrayOfRelationship:
		return soap_in_ns5__ArrayOfRelationship(soap, NULL, NULL, "ns5:ArrayOfRelationship");
	case SOAP_TYPE_ns5__RelationshipTag:
		return soap_in_ns5__RelationshipTag(soap, NULL, NULL, "ns5:RelationshipTag");
	case SOAP_TYPE_ns5__ArrayOfRelationshipTag:
		return soap_in_ns5__ArrayOfRelationshipTag(soap, NULL, NULL, "ns5:ArrayOfRelationshipTag");
	case SOAP_TYPE_ns5__Interest:
		return soap_in_ns5__Interest(soap, NULL, NULL, "ns5:Interest");
	case SOAP_TYPE_ns5__ArrayOfInterest:
		return soap_in_ns5__ArrayOfInterest(soap, NULL, NULL, "ns5:ArrayOfInterest");
	case SOAP_TYPE_ns5__HumourStatus:
		return soap_in_ns5__HumourStatus(soap, NULL, NULL, "ns5:HumourStatus");
	case SOAP_TYPE_ns5__ArrayOfHumourStatus:
		return soap_in_ns5__ArrayOfHumourStatus(soap, NULL, NULL, "ns5:ArrayOfHumourStatus");
	case SOAP_TYPE_ns5__Graph:
		return soap_in_ns5__Graph(soap, NULL, NULL, "ns5:Graph");
	case SOAP_TYPE_ns4__Exception:
		return soap_in_ns4__Exception(soap, NULL, NULL, "ns4:Exception");
	case SOAP_TYPE_ns4__SystemException:
		return soap_in_ns4__SystemException(soap, NULL, NULL, "ns4:SystemException");
	case SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData:
		return soap_in_ns3__ArrayOfFaultException_x002eFaultReasonData(soap, NULL, NULL, "ns3:ArrayOfFaultException.FaultReasonData");
	case SOAP_TYPE_ns3__FaultException_x002eFaultReasonData:
		return soap_in_ns3__FaultException_x002eFaultReasonData(soap, NULL, NULL, "ns3:FaultException.FaultReasonData");
	case SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData:
		return soap_in_ns3__ArrayOfFaultException_x002eFaultCodeData(soap, NULL, NULL, "ns3:ArrayOfFaultException.FaultCodeData");
	case SOAP_TYPE_ns3__FaultException_x002eFaultCodeData:
		return soap_in_ns3__FaultException_x002eFaultCodeData(soap, NULL, NULL, "ns3:FaultException.FaultCodeData");
	case SOAP_TYPE_ns3__CommunicationException:
		return soap_in_ns3__CommunicationException(soap, NULL, NULL, "ns3:CommunicationException");
	case SOAP_TYPE_ns3__FaultException:
		return soap_in_ns3__FaultException(soap, NULL, NULL, "ns3:FaultException");
	case SOAP_TYPE_PointerTo_ns1__LogoutResponse:
		return soap_in_PointerTo_ns1__LogoutResponse(soap, NULL, NULL, "ns1:LogoutResponse");
	case SOAP_TYPE_PointerTo_ns1__Logout:
		return soap_in_PointerTo_ns1__Logout(soap, NULL, NULL, "ns1:Logout");
	case SOAP_TYPE_PointerTo_ns1__GetGraphResponse:
		return soap_in_PointerTo_ns1__GetGraphResponse(soap, NULL, NULL, "ns1:GetGraphResponse");
	case SOAP_TYPE_PointerTo_ns1__GetGraph:
		return soap_in_PointerTo_ns1__GetGraph(soap, NULL, NULL, "ns1:GetGraph");
	case SOAP_TYPE_PointerTo_ns1__LoginResponse:
		return soap_in_PointerTo_ns1__LoginResponse(soap, NULL, NULL, "ns1:LoginResponse");
	case SOAP_TYPE_PointerTo_ns1__Login:
		return soap_in_PointerTo_ns1__Login(soap, NULL, NULL, "ns1:Login");
	case SOAP_TYPE_PointerTons3__FaultException:
		return soap_in_PointerTons3__FaultException(soap, NULL, NULL, "ns3:FaultException");
	case SOAP_TYPE_PointerToarr__ArrayOfint:
		return soap_in_PointerToarr__ArrayOfint(soap, NULL, NULL, "arr:ArrayOfint");
	case SOAP_TYPE_PointerTons5__User:
		return soap_in_PointerTons5__User(soap, NULL, NULL, "ns5:User");
	case SOAP_TYPE_PointerTons5__Relationship:
		return soap_in_PointerTons5__Relationship(soap, NULL, NULL, "ns5:Relationship");
	case SOAP_TYPE_PointerTons5__RelationshipTag:
		return soap_in_PointerTons5__RelationshipTag(soap, NULL, NULL, "ns5:RelationshipTag");
	case SOAP_TYPE_PointerTons5__Interest:
		return soap_in_PointerTons5__Interest(soap, NULL, NULL, "ns5:Interest");
	case SOAP_TYPE_PointerTons5__HumourStatus:
		return soap_in_PointerTons5__HumourStatus(soap, NULL, NULL, "ns5:HumourStatus");
	case SOAP_TYPE_PointerTons5__ArrayOfUser:
		return soap_in_PointerTons5__ArrayOfUser(soap, NULL, NULL, "ns5:ArrayOfUser");
	case SOAP_TYPE_PointerTons5__ArrayOfRelationship:
		return soap_in_PointerTons5__ArrayOfRelationship(soap, NULL, NULL, "ns5:ArrayOfRelationship");
	case SOAP_TYPE_PointerTons5__ArrayOfRelationshipTag:
		return soap_in_PointerTons5__ArrayOfRelationshipTag(soap, NULL, NULL, "ns5:ArrayOfRelationshipTag");
	case SOAP_TYPE_PointerTons5__ArrayOfInterest:
		return soap_in_PointerTons5__ArrayOfInterest(soap, NULL, NULL, "ns5:ArrayOfInterest");
	case SOAP_TYPE_PointerTons5__ArrayOfHumourStatus:
		return soap_in_PointerTons5__ArrayOfHumourStatus(soap, NULL, NULL, "ns5:ArrayOfHumourStatus");
	case SOAP_TYPE_PointerTons3__FaultException_x002eFaultReasonData:
		return soap_in_PointerTons3__FaultException_x002eFaultReasonData(soap, NULL, NULL, "ns3:FaultException.FaultReasonData");
	case SOAP_TYPE_PointerTons3__FaultException_x002eFaultCodeData:
		return soap_in_PointerTons3__FaultException_x002eFaultCodeData(soap, NULL, NULL, "ns3:FaultException.FaultCodeData");
	case SOAP_TYPE_PointerTons5__Graph:
		return soap_in_PointerTons5__Graph(soap, NULL, NULL, "ns5:Graph");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfint"))
		{	*type = SOAP_TYPE_arr__ArrayOfint;
			return soap_in_arr__ArrayOfint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:User"))
		{	*type = SOAP_TYPE_ns5__User;
			return soap_in_ns5__User(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfUser"))
		{	*type = SOAP_TYPE_ns5__ArrayOfUser;
			return soap_in_ns5__ArrayOfUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:Relationship"))
		{	*type = SOAP_TYPE_ns5__Relationship;
			return soap_in_ns5__Relationship(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfRelationship"))
		{	*type = SOAP_TYPE_ns5__ArrayOfRelationship;
			return soap_in_ns5__ArrayOfRelationship(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:RelationshipTag"))
		{	*type = SOAP_TYPE_ns5__RelationshipTag;
			return soap_in_ns5__RelationshipTag(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfRelationshipTag"))
		{	*type = SOAP_TYPE_ns5__ArrayOfRelationshipTag;
			return soap_in_ns5__ArrayOfRelationshipTag(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:Interest"))
		{	*type = SOAP_TYPE_ns5__Interest;
			return soap_in_ns5__Interest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfInterest"))
		{	*type = SOAP_TYPE_ns5__ArrayOfInterest;
			return soap_in_ns5__ArrayOfInterest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:HumourStatus"))
		{	*type = SOAP_TYPE_ns5__HumourStatus;
			return soap_in_ns5__HumourStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfHumourStatus"))
		{	*type = SOAP_TYPE_ns5__ArrayOfHumourStatus;
			return soap_in_ns5__ArrayOfHumourStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:Graph"))
		{	*type = SOAP_TYPE_ns5__Graph;
			return soap_in_ns5__Graph(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:Exception"))
		{	*type = SOAP_TYPE_ns4__Exception;
			return soap_in_ns4__Exception(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:SystemException"))
		{	*type = SOAP_TYPE_ns4__SystemException;
			return soap_in_ns4__SystemException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:ArrayOfFaultException.FaultReasonData"))
		{	*type = SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData;
			return soap_in_ns3__ArrayOfFaultException_x002eFaultReasonData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:FaultException.FaultReasonData"))
		{	*type = SOAP_TYPE_ns3__FaultException_x002eFaultReasonData;
			return soap_in_ns3__FaultException_x002eFaultReasonData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:ArrayOfFaultException.FaultCodeData"))
		{	*type = SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData;
			return soap_in_ns3__ArrayOfFaultException_x002eFaultCodeData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:FaultException.FaultCodeData"))
		{	*type = SOAP_TYPE_ns3__FaultException_x002eFaultCodeData;
			return soap_in_ns3__FaultException_x002eFaultCodeData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:CommunicationException"))
		{	*type = SOAP_TYPE_ns3__CommunicationException;
			return soap_in_ns3__CommunicationException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:FaultException"))
		{	*type = SOAP_TYPE_ns3__FaultException;
			return soap_in_ns3__FaultException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:LogoutResponse"))
		{	*type = SOAP_TYPE__ns1__LogoutResponse;
			return soap_in__ns1__LogoutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Logout"))
		{	*type = SOAP_TYPE__ns1__Logout;
			return soap_in__ns1__Logout(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetGraphResponse"))
		{	*type = SOAP_TYPE__ns1__GetGraphResponse;
			return soap_in__ns1__GetGraphResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetGraph"))
		{	*type = SOAP_TYPE__ns1__GetGraph;
			return soap_in__ns1__GetGraph(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LoginResponse"))
		{	*type = SOAP_TYPE__ns1__LoginResponse;
			return soap_in__ns1__LoginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Login"))
		{	*type = SOAP_TYPE__ns1__Login;
			return soap_in__ns1__Login(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_arr__ArrayOfint:
		return ((arr__ArrayOfint *)ptr)->soap_out(soap, tag, id, "arr:ArrayOfint");
	case SOAP_TYPE_ns5__User:
		return ((ns5__User *)ptr)->soap_out(soap, tag, id, "ns5:User");
	case SOAP_TYPE_ns5__ArrayOfUser:
		return ((ns5__ArrayOfUser *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfUser");
	case SOAP_TYPE_ns5__Relationship:
		return ((ns5__Relationship *)ptr)->soap_out(soap, tag, id, "ns5:Relationship");
	case SOAP_TYPE_ns5__ArrayOfRelationship:
		return ((ns5__ArrayOfRelationship *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfRelationship");
	case SOAP_TYPE_ns5__RelationshipTag:
		return ((ns5__RelationshipTag *)ptr)->soap_out(soap, tag, id, "ns5:RelationshipTag");
	case SOAP_TYPE_ns5__ArrayOfRelationshipTag:
		return ((ns5__ArrayOfRelationshipTag *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfRelationshipTag");
	case SOAP_TYPE_ns5__Interest:
		return ((ns5__Interest *)ptr)->soap_out(soap, tag, id, "ns5:Interest");
	case SOAP_TYPE_ns5__ArrayOfInterest:
		return ((ns5__ArrayOfInterest *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfInterest");
	case SOAP_TYPE_ns5__HumourStatus:
		return ((ns5__HumourStatus *)ptr)->soap_out(soap, tag, id, "ns5:HumourStatus");
	case SOAP_TYPE_ns5__ArrayOfHumourStatus:
		return ((ns5__ArrayOfHumourStatus *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfHumourStatus");
	case SOAP_TYPE_ns5__Graph:
		return ((ns5__Graph *)ptr)->soap_out(soap, tag, id, "ns5:Graph");
	case SOAP_TYPE_ns4__Exception:
		return ((ns4__Exception *)ptr)->soap_out(soap, tag, id, "ns4:Exception");
	case SOAP_TYPE_ns4__SystemException:
		return ((ns4__SystemException *)ptr)->soap_out(soap, tag, id, "ns4:SystemException");
	case SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData:
		return ((ns3__ArrayOfFaultException_x002eFaultReasonData *)ptr)->soap_out(soap, tag, id, "ns3:ArrayOfFaultException.FaultReasonData");
	case SOAP_TYPE_ns3__FaultException_x002eFaultReasonData:
		return ((ns3__FaultException_x002eFaultReasonData *)ptr)->soap_out(soap, tag, id, "ns3:FaultException.FaultReasonData");
	case SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData:
		return ((ns3__ArrayOfFaultException_x002eFaultCodeData *)ptr)->soap_out(soap, tag, id, "ns3:ArrayOfFaultException.FaultCodeData");
	case SOAP_TYPE_ns3__FaultException_x002eFaultCodeData:
		return ((ns3__FaultException_x002eFaultCodeData *)ptr)->soap_out(soap, tag, id, "ns3:FaultException.FaultCodeData");
	case SOAP_TYPE_ns3__CommunicationException:
		return ((ns3__CommunicationException *)ptr)->soap_out(soap, tag, id, "ns3:CommunicationException");
	case SOAP_TYPE_ns3__FaultException:
		return ((ns3__FaultException *)ptr)->soap_out(soap, tag, id, "ns3:FaultException");
	case SOAP_TYPE__ns1__LogoutResponse:
		return ((_ns1__LogoutResponse *)ptr)->soap_out(soap, "ns1:LogoutResponse", id, NULL);
	case SOAP_TYPE__ns1__Logout:
		return ((_ns1__Logout *)ptr)->soap_out(soap, "ns1:Logout", id, NULL);
	case SOAP_TYPE__ns1__GetGraphResponse:
		return ((_ns1__GetGraphResponse *)ptr)->soap_out(soap, "ns1:GetGraphResponse", id, NULL);
	case SOAP_TYPE__ns1__GetGraph:
		return ((_ns1__GetGraph *)ptr)->soap_out(soap, "ns1:GetGraph", id, NULL);
	case SOAP_TYPE__ns1__LoginResponse:
		return ((_ns1__LoginResponse *)ptr)->soap_out(soap, "ns1:LoginResponse", id, NULL);
	case SOAP_TYPE__ns1__Login:
		return ((_ns1__Login *)ptr)->soap_out(soap, "ns1:Login", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__LogoutResponse:
		return soap_out_PointerTo_ns1__LogoutResponse(soap, tag, id, (_ns1__LogoutResponse *const*)ptr, "ns1:LogoutResponse");
	case SOAP_TYPE_PointerTo_ns1__Logout:
		return soap_out_PointerTo_ns1__Logout(soap, tag, id, (_ns1__Logout *const*)ptr, "ns1:Logout");
	case SOAP_TYPE_PointerTo_ns1__GetGraphResponse:
		return soap_out_PointerTo_ns1__GetGraphResponse(soap, tag, id, (_ns1__GetGraphResponse *const*)ptr, "ns1:GetGraphResponse");
	case SOAP_TYPE_PointerTo_ns1__GetGraph:
		return soap_out_PointerTo_ns1__GetGraph(soap, tag, id, (_ns1__GetGraph *const*)ptr, "ns1:GetGraph");
	case SOAP_TYPE_PointerTo_ns1__LoginResponse:
		return soap_out_PointerTo_ns1__LoginResponse(soap, tag, id, (_ns1__LoginResponse *const*)ptr, "ns1:LoginResponse");
	case SOAP_TYPE_PointerTo_ns1__Login:
		return soap_out_PointerTo_ns1__Login(soap, tag, id, (_ns1__Login *const*)ptr, "ns1:Login");
	case SOAP_TYPE_PointerTons3__FaultException:
		return soap_out_PointerTons3__FaultException(soap, tag, id, (ns3__FaultException *const*)ptr, "ns3:FaultException");
	case SOAP_TYPE_PointerToarr__ArrayOfint:
		return soap_out_PointerToarr__ArrayOfint(soap, tag, id, (arr__ArrayOfint *const*)ptr, "arr:ArrayOfint");
	case SOAP_TYPE_PointerTons5__User:
		return soap_out_PointerTons5__User(soap, tag, id, (ns5__User *const*)ptr, "ns5:User");
	case SOAP_TYPE_PointerTons5__Relationship:
		return soap_out_PointerTons5__Relationship(soap, tag, id, (ns5__Relationship *const*)ptr, "ns5:Relationship");
	case SOAP_TYPE_PointerTons5__RelationshipTag:
		return soap_out_PointerTons5__RelationshipTag(soap, tag, id, (ns5__RelationshipTag *const*)ptr, "ns5:RelationshipTag");
	case SOAP_TYPE_PointerTons5__Interest:
		return soap_out_PointerTons5__Interest(soap, tag, id, (ns5__Interest *const*)ptr, "ns5:Interest");
	case SOAP_TYPE_PointerTons5__HumourStatus:
		return soap_out_PointerTons5__HumourStatus(soap, tag, id, (ns5__HumourStatus *const*)ptr, "ns5:HumourStatus");
	case SOAP_TYPE_PointerTons5__ArrayOfUser:
		return soap_out_PointerTons5__ArrayOfUser(soap, tag, id, (ns5__ArrayOfUser *const*)ptr, "ns5:ArrayOfUser");
	case SOAP_TYPE_PointerTons5__ArrayOfRelationship:
		return soap_out_PointerTons5__ArrayOfRelationship(soap, tag, id, (ns5__ArrayOfRelationship *const*)ptr, "ns5:ArrayOfRelationship");
	case SOAP_TYPE_PointerTons5__ArrayOfRelationshipTag:
		return soap_out_PointerTons5__ArrayOfRelationshipTag(soap, tag, id, (ns5__ArrayOfRelationshipTag *const*)ptr, "ns5:ArrayOfRelationshipTag");
	case SOAP_TYPE_PointerTons5__ArrayOfInterest:
		return soap_out_PointerTons5__ArrayOfInterest(soap, tag, id, (ns5__ArrayOfInterest *const*)ptr, "ns5:ArrayOfInterest");
	case SOAP_TYPE_PointerTons5__ArrayOfHumourStatus:
		return soap_out_PointerTons5__ArrayOfHumourStatus(soap, tag, id, (ns5__ArrayOfHumourStatus *const*)ptr, "ns5:ArrayOfHumourStatus");
	case SOAP_TYPE_PointerTons3__FaultException_x002eFaultReasonData:
		return soap_out_PointerTons3__FaultException_x002eFaultReasonData(soap, tag, id, (ns3__FaultException_x002eFaultReasonData *const*)ptr, "ns3:FaultException.FaultReasonData");
	case SOAP_TYPE_PointerTons3__FaultException_x002eFaultCodeData:
		return soap_out_PointerTons3__FaultException_x002eFaultCodeData(soap, tag, id, (ns3__FaultException_x002eFaultCodeData *const*)ptr, "ns3:FaultException.FaultCodeData");
	case SOAP_TYPE_PointerTons5__Graph:
		return soap_out_PointerTons5__Graph(soap, tag, id, (ns5__Graph *const*)ptr, "ns5:Graph");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_arr__ArrayOfint:
		((arr__ArrayOfint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__User:
		((ns5__User *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfUser:
		((ns5__ArrayOfUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__Relationship:
		((ns5__Relationship *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfRelationship:
		((ns5__ArrayOfRelationship *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__RelationshipTag:
		((ns5__RelationshipTag *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfRelationshipTag:
		((ns5__ArrayOfRelationshipTag *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__Interest:
		((ns5__Interest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfInterest:
		((ns5__ArrayOfInterest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__HumourStatus:
		((ns5__HumourStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfHumourStatus:
		((ns5__ArrayOfHumourStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__Graph:
		((ns5__Graph *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__Exception:
		((ns4__Exception *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__SystemException:
		((ns4__SystemException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData:
		((ns3__ArrayOfFaultException_x002eFaultReasonData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__FaultException_x002eFaultReasonData:
		((ns3__FaultException_x002eFaultReasonData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData:
		((ns3__ArrayOfFaultException_x002eFaultCodeData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__FaultException_x002eFaultCodeData:
		((ns3__FaultException_x002eFaultCodeData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__CommunicationException:
		((ns3__CommunicationException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__FaultException:
		((ns3__FaultException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LogoutResponse:
		((_ns1__LogoutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Logout:
		((_ns1__Logout *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetGraphResponse:
		((_ns1__GetGraphResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetGraph:
		((_ns1__GetGraph *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LoginResponse:
		((_ns1__LoginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Login:
		((_ns1__Login *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__Logout:
		soap_serialize___ns1__Logout(soap, (const struct __ns1__Logout *)ptr);
		break;
	case SOAP_TYPE___ns1__GetGraph:
		soap_serialize___ns1__GetGraph(soap, (const struct __ns1__GetGraph *)ptr);
		break;
	case SOAP_TYPE___ns1__Login:
		soap_serialize___ns1__Login(soap, (const struct __ns1__Login *)ptr);
		break;
	case SOAP_TYPE___ser__anyType:
		soap_serialize___ser__anyType(soap, (const struct __ser__anyType *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LogoutResponse:
		soap_serialize_PointerTo_ns1__LogoutResponse(soap, (_ns1__LogoutResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Logout:
		soap_serialize_PointerTo_ns1__Logout(soap, (_ns1__Logout *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetGraphResponse:
		soap_serialize_PointerTo_ns1__GetGraphResponse(soap, (_ns1__GetGraphResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetGraph:
		soap_serialize_PointerTo_ns1__GetGraph(soap, (_ns1__GetGraph *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LoginResponse:
		soap_serialize_PointerTo_ns1__LoginResponse(soap, (_ns1__LoginResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Login:
		soap_serialize_PointerTo_ns1__Login(soap, (_ns1__Login *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__FaultException:
		soap_serialize_PointerTons3__FaultException(soap, (ns3__FaultException *const*)ptr);
		break;
	case SOAP_TYPE_PointerToarr__ArrayOfint:
		soap_serialize_PointerToarr__ArrayOfint(soap, (arr__ArrayOfint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__User:
		soap_serialize_PointerTons5__User(soap, (ns5__User *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__Relationship:
		soap_serialize_PointerTons5__Relationship(soap, (ns5__Relationship *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__RelationshipTag:
		soap_serialize_PointerTons5__RelationshipTag(soap, (ns5__RelationshipTag *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__Interest:
		soap_serialize_PointerTons5__Interest(soap, (ns5__Interest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__HumourStatus:
		soap_serialize_PointerTons5__HumourStatus(soap, (ns5__HumourStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfUser:
		soap_serialize_PointerTons5__ArrayOfUser(soap, (ns5__ArrayOfUser *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfRelationship:
		soap_serialize_PointerTons5__ArrayOfRelationship(soap, (ns5__ArrayOfRelationship *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfRelationshipTag:
		soap_serialize_PointerTons5__ArrayOfRelationshipTag(soap, (ns5__ArrayOfRelationshipTag *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfInterest:
		soap_serialize_PointerTons5__ArrayOfInterest(soap, (ns5__ArrayOfInterest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfHumourStatus:
		soap_serialize_PointerTons5__ArrayOfHumourStatus(soap, (ns5__ArrayOfHumourStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__FaultException_x002eFaultReasonData:
		soap_serialize_PointerTons3__FaultException_x002eFaultReasonData(soap, (ns3__FaultException_x002eFaultReasonData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__FaultException_x002eFaultCodeData:
		soap_serialize_PointerTons3__FaultException_x002eFaultCodeData(soap, (ns3__FaultException_x002eFaultCodeData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__Graph:
		soap_serialize_PointerTons5__Graph(soap, (ns5__Graph *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE___ser__anyType:
		return (void*)soap_instantiate___ser__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Login:
		return (void*)soap_instantiate__ns1__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LoginResponse:
		return (void*)soap_instantiate__ns1__LoginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetGraph:
		return (void*)soap_instantiate__ns1__GetGraph(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetGraphResponse:
		return (void*)soap_instantiate__ns1__GetGraphResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Logout:
		return (void*)soap_instantiate__ns1__Logout(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LogoutResponse:
		return (void*)soap_instantiate__ns1__LogoutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__FaultException_x002eFaultCodeData:
		return (void*)soap_instantiate_ns3__FaultException_x002eFaultCodeData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData:
		return (void*)soap_instantiate_ns3__ArrayOfFaultException_x002eFaultCodeData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__FaultException_x002eFaultReasonData:
		return (void*)soap_instantiate_ns3__FaultException_x002eFaultReasonData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData:
		return (void*)soap_instantiate_ns3__ArrayOfFaultException_x002eFaultReasonData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__Exception:
		return (void*)soap_instantiate_ns4__Exception(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__Graph:
		return (void*)soap_instantiate_ns5__Graph(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfHumourStatus:
		return (void*)soap_instantiate_ns5__ArrayOfHumourStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__HumourStatus:
		return (void*)soap_instantiate_ns5__HumourStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfInterest:
		return (void*)soap_instantiate_ns5__ArrayOfInterest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__Interest:
		return (void*)soap_instantiate_ns5__Interest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfRelationshipTag:
		return (void*)soap_instantiate_ns5__ArrayOfRelationshipTag(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__RelationshipTag:
		return (void*)soap_instantiate_ns5__RelationshipTag(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfRelationship:
		return (void*)soap_instantiate_ns5__ArrayOfRelationship(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__Relationship:
		return (void*)soap_instantiate_ns5__Relationship(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfUser:
		return (void*)soap_instantiate_ns5__ArrayOfUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__User:
		return (void*)soap_instantiate_ns5__User(soap, -1, type, arrayType, n);
	case SOAP_TYPE_arr__ArrayOfint:
		return (void*)soap_instantiate_arr__ArrayOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__SystemException:
		return (void*)soap_instantiate_ns4__SystemException(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__CommunicationException:
		return (void*)soap_instantiate_ns3__CommunicationException(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__FaultException:
		return (void*)soap_instantiate_ns3__FaultException(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE___ns1__Login:
		return (void*)soap_instantiate___ns1__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetGraph:
		return (void*)soap_instantiate___ns1__GetGraph(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Logout:
		return (void*)soap_instantiate___ns1__Logout(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__User:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons5__User(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__Relationship:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons5__Relationship(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__RelationshipTag:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons5__RelationshipTag(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__Interest:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons5__Interest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__HumourStatus:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons5__HumourStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		return (void*)soap_instantiate_std__vectorTemplateOf_XML(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE___ser__anyType:
		if (p->size < 0)
			SOAP_DELETE((struct __ser__anyType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ser__anyType*)p->ptr);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Login:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Login*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LoginResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LoginResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LoginResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetGraph:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetGraph*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetGraph*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetGraphResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetGraphResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetGraphResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Logout:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Logout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Logout*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LogoutResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LogoutResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LogoutResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns3__FaultException_x002eFaultCodeData:
		if (p->size < 0)
			SOAP_DELETE((ns3__FaultException_x002eFaultCodeData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__FaultException_x002eFaultCodeData*)p->ptr);
		break;
	case SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData:
		if (p->size < 0)
			SOAP_DELETE((ns3__ArrayOfFaultException_x002eFaultCodeData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__ArrayOfFaultException_x002eFaultCodeData*)p->ptr);
		break;
	case SOAP_TYPE_ns3__FaultException_x002eFaultReasonData:
		if (p->size < 0)
			SOAP_DELETE((ns3__FaultException_x002eFaultReasonData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__FaultException_x002eFaultReasonData*)p->ptr);
		break;
	case SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData:
		if (p->size < 0)
			SOAP_DELETE((ns3__ArrayOfFaultException_x002eFaultReasonData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__ArrayOfFaultException_x002eFaultReasonData*)p->ptr);
		break;
	case SOAP_TYPE_ns4__Exception:
		if (p->size < 0)
			SOAP_DELETE((ns4__Exception*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns4__Exception*)p->ptr);
		break;
	case SOAP_TYPE_ns5__Graph:
		if (p->size < 0)
			SOAP_DELETE((ns5__Graph*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__Graph*)p->ptr);
		break;
	case SOAP_TYPE_ns5__ArrayOfHumourStatus:
		if (p->size < 0)
			SOAP_DELETE((ns5__ArrayOfHumourStatus*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__ArrayOfHumourStatus*)p->ptr);
		break;
	case SOAP_TYPE_ns5__HumourStatus:
		if (p->size < 0)
			SOAP_DELETE((ns5__HumourStatus*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__HumourStatus*)p->ptr);
		break;
	case SOAP_TYPE_ns5__ArrayOfInterest:
		if (p->size < 0)
			SOAP_DELETE((ns5__ArrayOfInterest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__ArrayOfInterest*)p->ptr);
		break;
	case SOAP_TYPE_ns5__Interest:
		if (p->size < 0)
			SOAP_DELETE((ns5__Interest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__Interest*)p->ptr);
		break;
	case SOAP_TYPE_ns5__ArrayOfRelationshipTag:
		if (p->size < 0)
			SOAP_DELETE((ns5__ArrayOfRelationshipTag*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__ArrayOfRelationshipTag*)p->ptr);
		break;
	case SOAP_TYPE_ns5__RelationshipTag:
		if (p->size < 0)
			SOAP_DELETE((ns5__RelationshipTag*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__RelationshipTag*)p->ptr);
		break;
	case SOAP_TYPE_ns5__ArrayOfRelationship:
		if (p->size < 0)
			SOAP_DELETE((ns5__ArrayOfRelationship*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__ArrayOfRelationship*)p->ptr);
		break;
	case SOAP_TYPE_ns5__Relationship:
		if (p->size < 0)
			SOAP_DELETE((ns5__Relationship*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__Relationship*)p->ptr);
		break;
	case SOAP_TYPE_ns5__ArrayOfUser:
		if (p->size < 0)
			SOAP_DELETE((ns5__ArrayOfUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__ArrayOfUser*)p->ptr);
		break;
	case SOAP_TYPE_ns5__User:
		if (p->size < 0)
			SOAP_DELETE((ns5__User*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__User*)p->ptr);
		break;
	case SOAP_TYPE_arr__ArrayOfint:
		if (p->size < 0)
			SOAP_DELETE((arr__ArrayOfint*)p->ptr);
		else
			SOAP_DELETE_ARRAY((arr__ArrayOfint*)p->ptr);
		break;
	case SOAP_TYPE_ns4__SystemException:
		if (p->size < 0)
			SOAP_DELETE((ns4__SystemException*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns4__SystemException*)p->ptr);
		break;
	case SOAP_TYPE_ns3__CommunicationException:
		if (p->size < 0)
			SOAP_DELETE((ns3__CommunicationException*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__CommunicationException*)p->ptr);
		break;
	case SOAP_TYPE_ns3__FaultException:
		if (p->size < 0)
			SOAP_DELETE((ns3__FaultException*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__FaultException*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
	case SOAP_TYPE___ns1__Login:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Login*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetGraph:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetGraph*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetGraph*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Logout:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Logout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Logout*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE((std::vector<int >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<int >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__User:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns5__User * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns5__User * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__Relationship:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns5__Relationship * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns5__Relationship * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__RelationshipTag:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns5__RelationshipTag * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns5__RelationshipTag * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__Interest:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns5__Interest * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns5__Interest * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__HumourStatus:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns5__HumourStatus * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns5__HumourStatus * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		if (p->size < 0)
			SOAP_DELETE((std::vector<char * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<char * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns3__FaultException_x002eFaultReasonData * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns3__FaultException_x002eFaultReasonData * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns3__FaultException_x002eFaultCodeData * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns3__FaultException_x002eFaultCodeData * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<int >*)p)[len] = *(int *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__User:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns5__User * >*)p)[len] = *(ns5__User **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__Relationship:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns5__Relationship * >*)p)[len] = *(ns5__Relationship **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__RelationshipTag:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns5__RelationshipTag * >*)p)[len] = *(ns5__RelationshipTag **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__Interest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns5__Interest * >*)p)[len] = *(ns5__Interest **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__HumourStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns5__HumourStatus * >*)p)[len] = *(ns5__HumourStatus **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<char * >*)p)[len] = *(char **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns3__FaultException_x002eFaultReasonData * >*)p)[len] = *(ns3__FaultException_x002eFaultReasonData **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns3__FaultException_x002eFaultCodeData * >*)p)[len] = *(ns3__FaultException_x002eFaultCodeData **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void arr__ArrayOfint::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfint(soap, &this->arr__ArrayOfint::int_);
	/* transient soap skipped */
}

void arr__ArrayOfint::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfint(soap, &this->arr__ArrayOfint::int_);
	/* transient soap skipped */
#endif
}

int arr__ArrayOfint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_arr__ArrayOfint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfint(struct soap *soap, const char *tag, int id, const arr__ArrayOfint *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_arr__ArrayOfint), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "arr:int", -1, &(a->arr__ArrayOfint::int_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *arr__ArrayOfint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_arr__ArrayOfint(soap, tag, this, type);
}

SOAP_FMAC3 arr__ArrayOfint * SOAP_FMAC4 soap_in_arr__ArrayOfint(struct soap *soap, const char *tag, arr__ArrayOfint *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (arr__ArrayOfint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_arr__ArrayOfint, sizeof(arr__ArrayOfint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_arr__ArrayOfint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (arr__ArrayOfint *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "arr:int", &(a->arr__ArrayOfint::int_), "xsd:int"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (arr__ArrayOfint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_arr__ArrayOfint, 0, sizeof(arr__ArrayOfint), 0, soap_copy_arr__ArrayOfint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int arr__ArrayOfint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_arr__ArrayOfint);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *arr__ArrayOfint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_arr__ArrayOfint(soap, this, tag, type);
}

SOAP_FMAC3 arr__ArrayOfint * SOAP_FMAC4 soap_get_arr__ArrayOfint(struct soap *soap, arr__ArrayOfint *p, const char *tag, const char *type)
{
	if ((p = soap_in_arr__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 arr__ArrayOfint * SOAP_FMAC2 soap_instantiate_arr__ArrayOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_arr__ArrayOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_arr__ArrayOfint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(arr__ArrayOfint);
		if (size)
			*size = sizeof(arr__ArrayOfint);
		((arr__ArrayOfint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(arr__ArrayOfint, n);
		if (size)
			*size = n * sizeof(arr__ArrayOfint);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((arr__ArrayOfint*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (arr__ArrayOfint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arr__ArrayOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying arr__ArrayOfint %p -> %p\n", q, p));
	*(arr__ArrayOfint*)p = *(arr__ArrayOfint*)q;
}

void ns5__User::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns5__User::Email = NULL;
	this->ns5__User::HumourStatusId = NULL;
	this->ns5__User::InterestsIDs = NULL;
	this->ns5__User::Name = NULL;
	this->ns5__User::Surname = NULL;
	/* transient soap skipped */
}

void ns5__User::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns5__User::Email);
	soap_serialize_PointerToint(soap, &this->ns5__User::HumourStatusId);
	soap_serialize_PointerToarr__ArrayOfint(soap, &this->ns5__User::InterestsIDs);
	soap_serialize_PointerTostd__string(soap, &this->ns5__User::Name);
	soap_serialize_PointerTostd__string(soap, &this->ns5__User::Surname);
	/* transient soap skipped */
#endif
}

int ns5__User::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__User(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__User(struct soap *soap, const char *tag, int id, const ns5__User *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__User), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:Email", -1, &(a->ns5__User::Email), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns5:HumourStatusId", -1, &(a->ns5__User::HumourStatusId), ""))
		return soap->error;
	if (soap_out_PointerToarr__ArrayOfint(soap, "ns5:InterestsIDs", -1, &(a->ns5__User::InterestsIDs), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:Name", -1, &(a->ns5__User::Name), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:Surname", -1, &(a->ns5__User::Surname), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__User::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__User(soap, tag, this, type);
}

SOAP_FMAC3 ns5__User * SOAP_FMAC4 soap_in_ns5__User(struct soap *soap, const char *tag, ns5__User *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__User *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__User, sizeof(ns5__User), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__User)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__User *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Email1 = 1;
	size_t soap_flag_HumourStatusId1 = 1;
	size_t soap_flag_InterestsIDs1 = 1;
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_Surname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:Email", &(a->ns5__User::Email), "xsd:string"))
				{	soap_flag_Email1--;
					continue;
				}
			if (soap_flag_HumourStatusId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns5:HumourStatusId", &(a->ns5__User::HumourStatusId), "xsd:int"))
				{	soap_flag_HumourStatusId1--;
					continue;
				}
			if (soap_flag_InterestsIDs1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfint(soap, "ns5:InterestsIDs", &(a->ns5__User::InterestsIDs), "arr:ArrayOfint"))
				{	soap_flag_InterestsIDs1--;
					continue;
				}
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:Name", &(a->ns5__User::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_Surname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:Surname", &(a->ns5__User::Surname), "xsd:string"))
				{	soap_flag_Surname1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__User *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__User, 0, sizeof(ns5__User), 0, soap_copy_ns5__User);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__User::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__User);
	if (this->soap_out(soap, tag?tag:"ns5:User", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__User::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__User(soap, this, tag, type);
}

SOAP_FMAC3 ns5__User * SOAP_FMAC4 soap_get_ns5__User(struct soap *soap, ns5__User *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__User(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__User * SOAP_FMAC2 soap_instantiate_ns5__User(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__User(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__User, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__User);
		if (size)
			*size = sizeof(ns5__User);
		((ns5__User*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__User, n);
		if (size)
			*size = n * sizeof(ns5__User);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__User*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__User*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__User(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__User %p -> %p\n", q, p));
	*(ns5__User*)p = *(ns5__User*)q;
}

void ns5__ArrayOfUser::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons5__User(soap, &this->ns5__ArrayOfUser::User);
	/* transient soap skipped */
}

void ns5__ArrayOfUser::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons5__User(soap, &this->ns5__ArrayOfUser::User);
	/* transient soap skipped */
#endif
}

int ns5__ArrayOfUser::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfUser(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfUser(struct soap *soap, const char *tag, int id, const ns5__ArrayOfUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfUser), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons5__User(soap, "ns5:User", -1, &(a->ns5__ArrayOfUser::User), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfUser::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfUser(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfUser * SOAP_FMAC4 soap_in_ns5__ArrayOfUser(struct soap *soap, const char *tag, ns5__ArrayOfUser *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfUser, sizeof(ns5__ArrayOfUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__ArrayOfUser)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__ArrayOfUser *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons5__User(soap, "ns5:User", &(a->ns5__ArrayOfUser::User), "ns5:User"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfUser, 0, sizeof(ns5__ArrayOfUser), 0, soap_copy_ns5__ArrayOfUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__ArrayOfUser::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__ArrayOfUser);
	if (this->soap_out(soap, tag?tag:"ns5:ArrayOfUser", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfUser::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfUser(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfUser * SOAP_FMAC4 soap_get_ns5__ArrayOfUser(struct soap *soap, ns5__ArrayOfUser *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__ArrayOfUser * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__ArrayOfUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfUser);
		if (size)
			*size = sizeof(ns5__ArrayOfUser);
		((ns5__ArrayOfUser*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__ArrayOfUser, n);
		if (size)
			*size = n * sizeof(ns5__ArrayOfUser);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfUser*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__ArrayOfUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ArrayOfUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__ArrayOfUser %p -> %p\n", q, p));
	*(ns5__ArrayOfUser*)p = *(ns5__ArrayOfUser*)q;
}

void ns5__Relationship::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns5__Relationship::RelationshipTagId = NULL;
	this->ns5__Relationship::Strength = NULL;
	this->ns5__Relationship::UserAEmail = NULL;
	this->ns5__Relationship::UserBEmail = NULL;
	/* transient soap skipped */
}

void ns5__Relationship::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->ns5__Relationship::RelationshipTagId);
	soap_serialize_PointerToint(soap, &this->ns5__Relationship::Strength);
	soap_serialize_PointerTostd__string(soap, &this->ns5__Relationship::UserAEmail);
	soap_serialize_PointerTostd__string(soap, &this->ns5__Relationship::UserBEmail);
	/* transient soap skipped */
#endif
}

int ns5__Relationship::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__Relationship(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Relationship(struct soap *soap, const char *tag, int id, const ns5__Relationship *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__Relationship), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns5:RelationshipTagId", -1, &(a->ns5__Relationship::RelationshipTagId), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns5:Strength", -1, &(a->ns5__Relationship::Strength), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:UserAEmail", -1, &(a->ns5__Relationship::UserAEmail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:UserBEmail", -1, &(a->ns5__Relationship::UserBEmail), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__Relationship::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__Relationship(soap, tag, this, type);
}

SOAP_FMAC3 ns5__Relationship * SOAP_FMAC4 soap_in_ns5__Relationship(struct soap *soap, const char *tag, ns5__Relationship *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__Relationship *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__Relationship, sizeof(ns5__Relationship), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__Relationship)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__Relationship *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_RelationshipTagId1 = 1;
	size_t soap_flag_Strength1 = 1;
	size_t soap_flag_UserAEmail1 = 1;
	size_t soap_flag_UserBEmail1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RelationshipTagId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns5:RelationshipTagId", &(a->ns5__Relationship::RelationshipTagId), "xsd:int"))
				{	soap_flag_RelationshipTagId1--;
					continue;
				}
			if (soap_flag_Strength1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns5:Strength", &(a->ns5__Relationship::Strength), "xsd:int"))
				{	soap_flag_Strength1--;
					continue;
				}
			if (soap_flag_UserAEmail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:UserAEmail", &(a->ns5__Relationship::UserAEmail), "xsd:string"))
				{	soap_flag_UserAEmail1--;
					continue;
				}
			if (soap_flag_UserBEmail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:UserBEmail", &(a->ns5__Relationship::UserBEmail), "xsd:string"))
				{	soap_flag_UserBEmail1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__Relationship *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__Relationship, 0, sizeof(ns5__Relationship), 0, soap_copy_ns5__Relationship);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__Relationship::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__Relationship);
	if (this->soap_out(soap, tag?tag:"ns5:Relationship", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__Relationship::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__Relationship(soap, this, tag, type);
}

SOAP_FMAC3 ns5__Relationship * SOAP_FMAC4 soap_get_ns5__Relationship(struct soap *soap, ns5__Relationship *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__Relationship(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__Relationship * SOAP_FMAC2 soap_instantiate_ns5__Relationship(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__Relationship(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__Relationship, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__Relationship);
		if (size)
			*size = sizeof(ns5__Relationship);
		((ns5__Relationship*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__Relationship, n);
		if (size)
			*size = n * sizeof(ns5__Relationship);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__Relationship*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__Relationship*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Relationship(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__Relationship %p -> %p\n", q, p));
	*(ns5__Relationship*)p = *(ns5__Relationship*)q;
}

void ns5__ArrayOfRelationship::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons5__Relationship(soap, &this->ns5__ArrayOfRelationship::Relationship);
	/* transient soap skipped */
}

void ns5__ArrayOfRelationship::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons5__Relationship(soap, &this->ns5__ArrayOfRelationship::Relationship);
	/* transient soap skipped */
#endif
}

int ns5__ArrayOfRelationship::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfRelationship(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfRelationship(struct soap *soap, const char *tag, int id, const ns5__ArrayOfRelationship *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfRelationship), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons5__Relationship(soap, "ns5:Relationship", -1, &(a->ns5__ArrayOfRelationship::Relationship), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfRelationship::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfRelationship(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfRelationship * SOAP_FMAC4 soap_in_ns5__ArrayOfRelationship(struct soap *soap, const char *tag, ns5__ArrayOfRelationship *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfRelationship *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfRelationship, sizeof(ns5__ArrayOfRelationship), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__ArrayOfRelationship)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__ArrayOfRelationship *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons5__Relationship(soap, "ns5:Relationship", &(a->ns5__ArrayOfRelationship::Relationship), "ns5:Relationship"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfRelationship *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfRelationship, 0, sizeof(ns5__ArrayOfRelationship), 0, soap_copy_ns5__ArrayOfRelationship);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__ArrayOfRelationship::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__ArrayOfRelationship);
	if (this->soap_out(soap, tag?tag:"ns5:ArrayOfRelationship", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfRelationship::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfRelationship(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfRelationship * SOAP_FMAC4 soap_get_ns5__ArrayOfRelationship(struct soap *soap, ns5__ArrayOfRelationship *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfRelationship(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__ArrayOfRelationship * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfRelationship(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfRelationship(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__ArrayOfRelationship, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfRelationship);
		if (size)
			*size = sizeof(ns5__ArrayOfRelationship);
		((ns5__ArrayOfRelationship*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__ArrayOfRelationship, n);
		if (size)
			*size = n * sizeof(ns5__ArrayOfRelationship);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfRelationship*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__ArrayOfRelationship*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ArrayOfRelationship(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__ArrayOfRelationship %p -> %p\n", q, p));
	*(ns5__ArrayOfRelationship*)p = *(ns5__ArrayOfRelationship*)q;
}

void ns5__RelationshipTag::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns5__RelationshipTag::Id = NULL;
	this->ns5__RelationshipTag::Name = NULL;
	/* transient soap skipped */
}

void ns5__RelationshipTag::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->ns5__RelationshipTag::Id);
	soap_serialize_PointerTostd__string(soap, &this->ns5__RelationshipTag::Name);
	/* transient soap skipped */
#endif
}

int ns5__RelationshipTag::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__RelationshipTag(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RelationshipTag(struct soap *soap, const char *tag, int id, const ns5__RelationshipTag *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__RelationshipTag), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns5:Id", -1, &(a->ns5__RelationshipTag::Id), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:Name", -1, &(a->ns5__RelationshipTag::Name), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__RelationshipTag::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__RelationshipTag(soap, tag, this, type);
}

SOAP_FMAC3 ns5__RelationshipTag * SOAP_FMAC4 soap_in_ns5__RelationshipTag(struct soap *soap, const char *tag, ns5__RelationshipTag *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__RelationshipTag *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__RelationshipTag, sizeof(ns5__RelationshipTag), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__RelationshipTag)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__RelationshipTag *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_Name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns5:Id", &(a->ns5__RelationshipTag::Id), "xsd:int"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:Name", &(a->ns5__RelationshipTag::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__RelationshipTag *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__RelationshipTag, 0, sizeof(ns5__RelationshipTag), 0, soap_copy_ns5__RelationshipTag);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__RelationshipTag::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__RelationshipTag);
	if (this->soap_out(soap, tag?tag:"ns5:RelationshipTag", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__RelationshipTag::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__RelationshipTag(soap, this, tag, type);
}

SOAP_FMAC3 ns5__RelationshipTag * SOAP_FMAC4 soap_get_ns5__RelationshipTag(struct soap *soap, ns5__RelationshipTag *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__RelationshipTag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__RelationshipTag * SOAP_FMAC2 soap_instantiate_ns5__RelationshipTag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__RelationshipTag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__RelationshipTag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__RelationshipTag);
		if (size)
			*size = sizeof(ns5__RelationshipTag);
		((ns5__RelationshipTag*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__RelationshipTag, n);
		if (size)
			*size = n * sizeof(ns5__RelationshipTag);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__RelationshipTag*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__RelationshipTag*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RelationshipTag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__RelationshipTag %p -> %p\n", q, p));
	*(ns5__RelationshipTag*)p = *(ns5__RelationshipTag*)q;
}

void ns5__ArrayOfRelationshipTag::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons5__RelationshipTag(soap, &this->ns5__ArrayOfRelationshipTag::RelationshipTag);
	/* transient soap skipped */
}

void ns5__ArrayOfRelationshipTag::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons5__RelationshipTag(soap, &this->ns5__ArrayOfRelationshipTag::RelationshipTag);
	/* transient soap skipped */
#endif
}

int ns5__ArrayOfRelationshipTag::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfRelationshipTag(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfRelationshipTag(struct soap *soap, const char *tag, int id, const ns5__ArrayOfRelationshipTag *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfRelationshipTag), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons5__RelationshipTag(soap, "ns5:RelationshipTag", -1, &(a->ns5__ArrayOfRelationshipTag::RelationshipTag), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfRelationshipTag::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfRelationshipTag(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfRelationshipTag * SOAP_FMAC4 soap_in_ns5__ArrayOfRelationshipTag(struct soap *soap, const char *tag, ns5__ArrayOfRelationshipTag *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfRelationshipTag *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfRelationshipTag, sizeof(ns5__ArrayOfRelationshipTag), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__ArrayOfRelationshipTag)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__ArrayOfRelationshipTag *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons5__RelationshipTag(soap, "ns5:RelationshipTag", &(a->ns5__ArrayOfRelationshipTag::RelationshipTag), "ns5:RelationshipTag"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfRelationshipTag *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfRelationshipTag, 0, sizeof(ns5__ArrayOfRelationshipTag), 0, soap_copy_ns5__ArrayOfRelationshipTag);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__ArrayOfRelationshipTag::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__ArrayOfRelationshipTag);
	if (this->soap_out(soap, tag?tag:"ns5:ArrayOfRelationshipTag", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfRelationshipTag::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfRelationshipTag(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfRelationshipTag * SOAP_FMAC4 soap_get_ns5__ArrayOfRelationshipTag(struct soap *soap, ns5__ArrayOfRelationshipTag *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfRelationshipTag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__ArrayOfRelationshipTag * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfRelationshipTag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfRelationshipTag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__ArrayOfRelationshipTag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfRelationshipTag);
		if (size)
			*size = sizeof(ns5__ArrayOfRelationshipTag);
		((ns5__ArrayOfRelationshipTag*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__ArrayOfRelationshipTag, n);
		if (size)
			*size = n * sizeof(ns5__ArrayOfRelationshipTag);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfRelationshipTag*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__ArrayOfRelationshipTag*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ArrayOfRelationshipTag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__ArrayOfRelationshipTag %p -> %p\n", q, p));
	*(ns5__ArrayOfRelationshipTag*)p = *(ns5__ArrayOfRelationshipTag*)q;
}

void ns5__Interest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns5__Interest::Id = NULL;
	this->ns5__Interest::Name = NULL;
	/* transient soap skipped */
}

void ns5__Interest::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->ns5__Interest::Id);
	soap_serialize_PointerTostd__string(soap, &this->ns5__Interest::Name);
	/* transient soap skipped */
#endif
}

int ns5__Interest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__Interest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Interest(struct soap *soap, const char *tag, int id, const ns5__Interest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__Interest), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns5:Id", -1, &(a->ns5__Interest::Id), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:Name", -1, &(a->ns5__Interest::Name), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__Interest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__Interest(soap, tag, this, type);
}

SOAP_FMAC3 ns5__Interest * SOAP_FMAC4 soap_in_ns5__Interest(struct soap *soap, const char *tag, ns5__Interest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__Interest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__Interest, sizeof(ns5__Interest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__Interest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__Interest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_Name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns5:Id", &(a->ns5__Interest::Id), "xsd:int"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:Name", &(a->ns5__Interest::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__Interest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__Interest, 0, sizeof(ns5__Interest), 0, soap_copy_ns5__Interest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__Interest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__Interest);
	if (this->soap_out(soap, tag?tag:"ns5:Interest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__Interest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__Interest(soap, this, tag, type);
}

SOAP_FMAC3 ns5__Interest * SOAP_FMAC4 soap_get_ns5__Interest(struct soap *soap, ns5__Interest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__Interest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__Interest * SOAP_FMAC2 soap_instantiate_ns5__Interest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__Interest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__Interest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__Interest);
		if (size)
			*size = sizeof(ns5__Interest);
		((ns5__Interest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__Interest, n);
		if (size)
			*size = n * sizeof(ns5__Interest);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__Interest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__Interest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Interest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__Interest %p -> %p\n", q, p));
	*(ns5__Interest*)p = *(ns5__Interest*)q;
}

void ns5__ArrayOfInterest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons5__Interest(soap, &this->ns5__ArrayOfInterest::Interest);
	/* transient soap skipped */
}

void ns5__ArrayOfInterest::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons5__Interest(soap, &this->ns5__ArrayOfInterest::Interest);
	/* transient soap skipped */
#endif
}

int ns5__ArrayOfInterest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfInterest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfInterest(struct soap *soap, const char *tag, int id, const ns5__ArrayOfInterest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfInterest), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons5__Interest(soap, "ns5:Interest", -1, &(a->ns5__ArrayOfInterest::Interest), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfInterest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfInterest(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfInterest * SOAP_FMAC4 soap_in_ns5__ArrayOfInterest(struct soap *soap, const char *tag, ns5__ArrayOfInterest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfInterest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfInterest, sizeof(ns5__ArrayOfInterest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__ArrayOfInterest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__ArrayOfInterest *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons5__Interest(soap, "ns5:Interest", &(a->ns5__ArrayOfInterest::Interest), "ns5:Interest"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfInterest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfInterest, 0, sizeof(ns5__ArrayOfInterest), 0, soap_copy_ns5__ArrayOfInterest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__ArrayOfInterest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__ArrayOfInterest);
	if (this->soap_out(soap, tag?tag:"ns5:ArrayOfInterest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfInterest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfInterest(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfInterest * SOAP_FMAC4 soap_get_ns5__ArrayOfInterest(struct soap *soap, ns5__ArrayOfInterest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfInterest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__ArrayOfInterest * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfInterest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfInterest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__ArrayOfInterest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfInterest);
		if (size)
			*size = sizeof(ns5__ArrayOfInterest);
		((ns5__ArrayOfInterest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__ArrayOfInterest, n);
		if (size)
			*size = n * sizeof(ns5__ArrayOfInterest);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfInterest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__ArrayOfInterest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ArrayOfInterest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__ArrayOfInterest %p -> %p\n", q, p));
	*(ns5__ArrayOfInterest*)p = *(ns5__ArrayOfInterest*)q;
}

void ns5__HumourStatus::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns5__HumourStatus::Id = NULL;
	this->ns5__HumourStatus::Name = NULL;
	/* transient soap skipped */
}

void ns5__HumourStatus::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->ns5__HumourStatus::Id);
	soap_serialize_PointerTostd__string(soap, &this->ns5__HumourStatus::Name);
	/* transient soap skipped */
#endif
}

int ns5__HumourStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__HumourStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__HumourStatus(struct soap *soap, const char *tag, int id, const ns5__HumourStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__HumourStatus), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns5:Id", -1, &(a->ns5__HumourStatus::Id), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:Name", -1, &(a->ns5__HumourStatus::Name), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__HumourStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__HumourStatus(soap, tag, this, type);
}

SOAP_FMAC3 ns5__HumourStatus * SOAP_FMAC4 soap_in_ns5__HumourStatus(struct soap *soap, const char *tag, ns5__HumourStatus *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__HumourStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__HumourStatus, sizeof(ns5__HumourStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__HumourStatus)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__HumourStatus *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_Name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns5:Id", &(a->ns5__HumourStatus::Id), "xsd:int"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:Name", &(a->ns5__HumourStatus::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__HumourStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__HumourStatus, 0, sizeof(ns5__HumourStatus), 0, soap_copy_ns5__HumourStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__HumourStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__HumourStatus);
	if (this->soap_out(soap, tag?tag:"ns5:HumourStatus", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__HumourStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__HumourStatus(soap, this, tag, type);
}

SOAP_FMAC3 ns5__HumourStatus * SOAP_FMAC4 soap_get_ns5__HumourStatus(struct soap *soap, ns5__HumourStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__HumourStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__HumourStatus * SOAP_FMAC2 soap_instantiate_ns5__HumourStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__HumourStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__HumourStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__HumourStatus);
		if (size)
			*size = sizeof(ns5__HumourStatus);
		((ns5__HumourStatus*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__HumourStatus, n);
		if (size)
			*size = n * sizeof(ns5__HumourStatus);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__HumourStatus*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__HumourStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__HumourStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__HumourStatus %p -> %p\n", q, p));
	*(ns5__HumourStatus*)p = *(ns5__HumourStatus*)q;
}

void ns5__ArrayOfHumourStatus::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons5__HumourStatus(soap, &this->ns5__ArrayOfHumourStatus::HumourStatus);
	/* transient soap skipped */
}

void ns5__ArrayOfHumourStatus::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons5__HumourStatus(soap, &this->ns5__ArrayOfHumourStatus::HumourStatus);
	/* transient soap skipped */
#endif
}

int ns5__ArrayOfHumourStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfHumourStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfHumourStatus(struct soap *soap, const char *tag, int id, const ns5__ArrayOfHumourStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfHumourStatus), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons5__HumourStatus(soap, "ns5:HumourStatus", -1, &(a->ns5__ArrayOfHumourStatus::HumourStatus), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfHumourStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfHumourStatus(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfHumourStatus * SOAP_FMAC4 soap_in_ns5__ArrayOfHumourStatus(struct soap *soap, const char *tag, ns5__ArrayOfHumourStatus *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfHumourStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfHumourStatus, sizeof(ns5__ArrayOfHumourStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__ArrayOfHumourStatus)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__ArrayOfHumourStatus *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons5__HumourStatus(soap, "ns5:HumourStatus", &(a->ns5__ArrayOfHumourStatus::HumourStatus), "ns5:HumourStatus"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfHumourStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfHumourStatus, 0, sizeof(ns5__ArrayOfHumourStatus), 0, soap_copy_ns5__ArrayOfHumourStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__ArrayOfHumourStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__ArrayOfHumourStatus);
	if (this->soap_out(soap, tag?tag:"ns5:ArrayOfHumourStatus", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfHumourStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfHumourStatus(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfHumourStatus * SOAP_FMAC4 soap_get_ns5__ArrayOfHumourStatus(struct soap *soap, ns5__ArrayOfHumourStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfHumourStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__ArrayOfHumourStatus * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfHumourStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfHumourStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__ArrayOfHumourStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfHumourStatus);
		if (size)
			*size = sizeof(ns5__ArrayOfHumourStatus);
		((ns5__ArrayOfHumourStatus*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__ArrayOfHumourStatus, n);
		if (size)
			*size = n * sizeof(ns5__ArrayOfHumourStatus);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfHumourStatus*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__ArrayOfHumourStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ArrayOfHumourStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__ArrayOfHumourStatus %p -> %p\n", q, p));
	*(ns5__ArrayOfHumourStatus*)p = *(ns5__ArrayOfHumourStatus*)q;
}

void ns5__Graph::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns5__Graph::HumourStatus = NULL;
	this->ns5__Graph::Interests = NULL;
	this->ns5__Graph::RelationshipTags = NULL;
	this->ns5__Graph::Relationships = NULL;
	this->ns5__Graph::Users = NULL;
	/* transient soap skipped */
}

void ns5__Graph::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons5__ArrayOfHumourStatus(soap, &this->ns5__Graph::HumourStatus);
	soap_serialize_PointerTons5__ArrayOfInterest(soap, &this->ns5__Graph::Interests);
	soap_serialize_PointerTons5__ArrayOfRelationshipTag(soap, &this->ns5__Graph::RelationshipTags);
	soap_serialize_PointerTons5__ArrayOfRelationship(soap, &this->ns5__Graph::Relationships);
	soap_serialize_PointerTons5__ArrayOfUser(soap, &this->ns5__Graph::Users);
	/* transient soap skipped */
#endif
}

int ns5__Graph::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__Graph(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Graph(struct soap *soap, const char *tag, int id, const ns5__Graph *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__Graph), type))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfHumourStatus(soap, "ns5:HumourStatus", -1, &(a->ns5__Graph::HumourStatus), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfInterest(soap, "ns5:Interests", -1, &(a->ns5__Graph::Interests), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfRelationshipTag(soap, "ns5:RelationshipTags", -1, &(a->ns5__Graph::RelationshipTags), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfRelationship(soap, "ns5:Relationships", -1, &(a->ns5__Graph::Relationships), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfUser(soap, "ns5:Users", -1, &(a->ns5__Graph::Users), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns5__Graph::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__Graph(soap, tag, this, type);
}

SOAP_FMAC3 ns5__Graph * SOAP_FMAC4 soap_in_ns5__Graph(struct soap *soap, const char *tag, ns5__Graph *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__Graph *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__Graph, sizeof(ns5__Graph), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__Graph)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__Graph *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_HumourStatus1 = 1;
	size_t soap_flag_Interests1 = 1;
	size_t soap_flag_RelationshipTags1 = 1;
	size_t soap_flag_Relationships1 = 1;
	size_t soap_flag_Users1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_HumourStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfHumourStatus(soap, "ns5:HumourStatus", &(a->ns5__Graph::HumourStatus), "ns5:ArrayOfHumourStatus"))
				{	soap_flag_HumourStatus1--;
					continue;
				}
			if (soap_flag_Interests1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfInterest(soap, "ns5:Interests", &(a->ns5__Graph::Interests), "ns5:ArrayOfInterest"))
				{	soap_flag_Interests1--;
					continue;
				}
			if (soap_flag_RelationshipTags1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfRelationshipTag(soap, "ns5:RelationshipTags", &(a->ns5__Graph::RelationshipTags), "ns5:ArrayOfRelationshipTag"))
				{	soap_flag_RelationshipTags1--;
					continue;
				}
			if (soap_flag_Relationships1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfRelationship(soap, "ns5:Relationships", &(a->ns5__Graph::Relationships), "ns5:ArrayOfRelationship"))
				{	soap_flag_Relationships1--;
					continue;
				}
			if (soap_flag_Users1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfUser(soap, "ns5:Users", &(a->ns5__Graph::Users), "ns5:ArrayOfUser"))
				{	soap_flag_Users1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__Graph *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__Graph, 0, sizeof(ns5__Graph), 0, soap_copy_ns5__Graph);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__Graph::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__Graph);
	if (this->soap_out(soap, tag?tag:"ns5:Graph", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__Graph::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__Graph(soap, this, tag, type);
}

SOAP_FMAC3 ns5__Graph * SOAP_FMAC4 soap_get_ns5__Graph(struct soap *soap, ns5__Graph *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__Graph(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__Graph * SOAP_FMAC2 soap_instantiate_ns5__Graph(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__Graph(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__Graph, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__Graph);
		if (size)
			*size = sizeof(ns5__Graph);
		((ns5__Graph*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__Graph, n);
		if (size)
			*size = n * sizeof(ns5__Graph);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__Graph*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__Graph*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Graph(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__Graph %p -> %p\n", q, p));
	*(ns5__Graph*)p = *(ns5__Graph*)q;
}

void ns4__Exception::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOf_XML(soap, &this->ns4__Exception::__any);
	soap_default_int(soap, &this->ns4__Exception::_ser__FactoryType);
}

void ns4__Exception::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->ns4__Exception::__any);
#endif
}

int ns4__Exception::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__Exception(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Exception(struct soap *soap, const char *tag, int id, const ns4__Exception *a, const char *type)
{
	soap_set_attr(soap, "ser:FactoryType", soap_int2s(soap, ((ns4__Exception*)a)->_ser__FactoryType), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__Exception), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->ns4__Exception::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__Exception::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__Exception(soap, tag, this, type);
}

SOAP_FMAC3 ns4__Exception * SOAP_FMAC4 soap_in_ns4__Exception(struct soap *soap, const char *tag, ns4__Exception *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__Exception *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__Exception, sizeof(ns4__Exception), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__Exception)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__Exception *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2int(soap, soap_attr_value(soap, "ser:FactoryType", 0), &((ns4__Exception*)a)->_ser__FactoryType))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->ns4__Exception::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__Exception *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__Exception, 0, sizeof(ns4__Exception), 0, soap_copy_ns4__Exception);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__Exception::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__Exception);
	if (this->soap_out(soap, tag?tag:"ns4:Exception", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__Exception::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__Exception(soap, this, tag, type);
}

SOAP_FMAC3 ns4__Exception * SOAP_FMAC4 soap_get_ns4__Exception(struct soap *soap, ns4__Exception *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__Exception(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__Exception * SOAP_FMAC2 soap_instantiate_ns4__Exception(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__Exception(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__Exception, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "ns4:SystemException"))
	{	cp->type = SOAP_TYPE_ns4__SystemException;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns4__SystemException);
			if (size)
				*size = sizeof(ns4__SystemException);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns4__SystemException, n);
			if (size)
				*size = n * sizeof(ns4__SystemException);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns4__SystemException*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:CommunicationException"))
	{	cp->type = SOAP_TYPE_ns3__CommunicationException;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__CommunicationException);
			if (size)
				*size = sizeof(ns3__CommunicationException);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__CommunicationException, n);
			if (size)
				*size = n * sizeof(ns3__CommunicationException);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns3__CommunicationException*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:FaultException"))
	{	cp->type = SOAP_TYPE_ns3__FaultException;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__FaultException);
			if (size)
				*size = sizeof(ns3__FaultException);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__FaultException, n);
			if (size)
				*size = n * sizeof(ns3__FaultException);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns3__FaultException*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns4__Exception);
		if (size)
			*size = sizeof(ns4__Exception);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns4__Exception, n);
		if (size)
			*size = n * sizeof(ns4__Exception);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns4__Exception*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Exception(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__Exception %p -> %p\n", q, p));
	*(ns4__Exception*)p = *(ns4__Exception*)q;
}

void ns4__SystemException::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns4__Exception::soap_default(soap);
}

void ns4__SystemException::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns4__Exception::soap_serialize(soap);
#endif
}

int ns4__SystemException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__SystemException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SystemException(struct soap *soap, const char *tag, int id, const ns4__SystemException *a, const char *type)
{
	soap_set_attr(soap, "ser:FactoryType", soap_int2s(soap, ((ns4__Exception*)a)->_ser__FactoryType), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__SystemException), "ns4:SystemException"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->ns4__Exception::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__SystemException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__SystemException(soap, tag, this, type);
}

SOAP_FMAC3 ns4__SystemException * SOAP_FMAC4 soap_in_ns4__SystemException(struct soap *soap, const char *tag, ns4__SystemException *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__SystemException *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__SystemException, sizeof(ns4__SystemException), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__SystemException)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__SystemException *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2int(soap, soap_attr_value(soap, "ser:FactoryType", 0), &((ns4__Exception*)a)->_ser__FactoryType))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->ns4__Exception::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__SystemException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__SystemException, 0, sizeof(ns4__SystemException), 0, soap_copy_ns4__SystemException);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__SystemException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__SystemException);
	if (this->soap_out(soap, tag?tag:"ns4:SystemException", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__SystemException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__SystemException(soap, this, tag, type);
}

SOAP_FMAC3 ns4__SystemException * SOAP_FMAC4 soap_get_ns4__SystemException(struct soap *soap, ns4__SystemException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__SystemException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__SystemException * SOAP_FMAC2 soap_instantiate_ns4__SystemException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__SystemException(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__SystemException, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "ns3:CommunicationException"))
	{	cp->type = SOAP_TYPE_ns3__CommunicationException;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__CommunicationException);
			if (size)
				*size = sizeof(ns3__CommunicationException);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__CommunicationException, n);
			if (size)
				*size = n * sizeof(ns3__CommunicationException);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns3__CommunicationException*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:FaultException"))
	{	cp->type = SOAP_TYPE_ns3__FaultException;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__FaultException);
			if (size)
				*size = sizeof(ns3__FaultException);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__FaultException, n);
			if (size)
				*size = n * sizeof(ns3__FaultException);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns3__FaultException*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns4__SystemException);
		if (size)
			*size = sizeof(ns4__SystemException);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns4__SystemException, n);
		if (size)
			*size = n * sizeof(ns4__SystemException);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns4__SystemException*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__SystemException(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__SystemException %p -> %p\n", q, p));
	*(ns4__SystemException*)p = *(ns4__SystemException*)q;
}

void ns3__ArrayOfFaultException_x002eFaultReasonData::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(soap, &this->ns3__ArrayOfFaultException_x002eFaultReasonData::FaultException_x002eFaultReasonData);
	/* transient soap skipped */
}

void ns3__ArrayOfFaultException_x002eFaultReasonData::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(soap, &this->ns3__ArrayOfFaultException_x002eFaultReasonData::FaultException_x002eFaultReasonData);
	/* transient soap skipped */
#endif
}

int ns3__ArrayOfFaultException_x002eFaultReasonData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__ArrayOfFaultException_x002eFaultReasonData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfFaultException_x002eFaultReasonData(struct soap *soap, const char *tag, int id, const ns3__ArrayOfFaultException_x002eFaultReasonData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(soap, "ns3:FaultException.FaultReasonData", -1, &(a->ns3__ArrayOfFaultException_x002eFaultReasonData::FaultException_x002eFaultReasonData), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__ArrayOfFaultException_x002eFaultReasonData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__ArrayOfFaultException_x002eFaultReasonData(soap, tag, this, type);
}

SOAP_FMAC3 ns3__ArrayOfFaultException_x002eFaultReasonData * SOAP_FMAC4 soap_in_ns3__ArrayOfFaultException_x002eFaultReasonData(struct soap *soap, const char *tag, ns3__ArrayOfFaultException_x002eFaultReasonData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__ArrayOfFaultException_x002eFaultReasonData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData, sizeof(ns3__ArrayOfFaultException_x002eFaultReasonData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__ArrayOfFaultException_x002eFaultReasonData *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(soap, "ns3:FaultException.FaultReasonData", &(a->ns3__ArrayOfFaultException_x002eFaultReasonData::FaultException_x002eFaultReasonData), "ns3:FaultException.FaultReasonData"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__ArrayOfFaultException_x002eFaultReasonData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData, 0, sizeof(ns3__ArrayOfFaultException_x002eFaultReasonData), 0, soap_copy_ns3__ArrayOfFaultException_x002eFaultReasonData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__ArrayOfFaultException_x002eFaultReasonData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData);
	if (this->soap_out(soap, tag?tag:"ns3:ArrayOfFaultException.FaultReasonData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__ArrayOfFaultException_x002eFaultReasonData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__ArrayOfFaultException_x002eFaultReasonData(soap, this, tag, type);
}

SOAP_FMAC3 ns3__ArrayOfFaultException_x002eFaultReasonData * SOAP_FMAC4 soap_get_ns3__ArrayOfFaultException_x002eFaultReasonData(struct soap *soap, ns3__ArrayOfFaultException_x002eFaultReasonData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__ArrayOfFaultException_x002eFaultReasonData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__ArrayOfFaultException_x002eFaultReasonData * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFaultException_x002eFaultReasonData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__ArrayOfFaultException_x002eFaultReasonData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultReasonData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__ArrayOfFaultException_x002eFaultReasonData);
		if (size)
			*size = sizeof(ns3__ArrayOfFaultException_x002eFaultReasonData);
		((ns3__ArrayOfFaultException_x002eFaultReasonData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__ArrayOfFaultException_x002eFaultReasonData, n);
		if (size)
			*size = n * sizeof(ns3__ArrayOfFaultException_x002eFaultReasonData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__ArrayOfFaultException_x002eFaultReasonData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__ArrayOfFaultException_x002eFaultReasonData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ArrayOfFaultException_x002eFaultReasonData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__ArrayOfFaultException_x002eFaultReasonData %p -> %p\n", q, p));
	*(ns3__ArrayOfFaultException_x002eFaultReasonData*)p = *(ns3__ArrayOfFaultException_x002eFaultReasonData*)q;
}

void ns3__FaultException_x002eFaultReasonData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__FaultException_x002eFaultReasonData::text = NULL;
	this->ns3__FaultException_x002eFaultReasonData::xmlLang = NULL;
	/* transient soap skipped */
}

void ns3__FaultException_x002eFaultReasonData::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns3__FaultException_x002eFaultReasonData::text);
	soap_serialize_PointerTostd__string(soap, &this->ns3__FaultException_x002eFaultReasonData::xmlLang);
	/* transient soap skipped */
#endif
}

int ns3__FaultException_x002eFaultReasonData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__FaultException_x002eFaultReasonData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FaultException_x002eFaultReasonData(struct soap *soap, const char *tag, int id, const ns3__FaultException_x002eFaultReasonData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__FaultException_x002eFaultReasonData), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:text", -1, &(a->ns3__FaultException_x002eFaultReasonData::text), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:xmlLang", -1, &(a->ns3__FaultException_x002eFaultReasonData::xmlLang), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__FaultException_x002eFaultReasonData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__FaultException_x002eFaultReasonData(soap, tag, this, type);
}

SOAP_FMAC3 ns3__FaultException_x002eFaultReasonData * SOAP_FMAC4 soap_in_ns3__FaultException_x002eFaultReasonData(struct soap *soap, const char *tag, ns3__FaultException_x002eFaultReasonData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__FaultException_x002eFaultReasonData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__FaultException_x002eFaultReasonData, sizeof(ns3__FaultException_x002eFaultReasonData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__FaultException_x002eFaultReasonData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__FaultException_x002eFaultReasonData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_text1 = 1;
	size_t soap_flag_xmlLang1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:text", &(a->ns3__FaultException_x002eFaultReasonData::text), "xsd:string"))
				{	soap_flag_text1--;
					continue;
				}
			if (soap_flag_xmlLang1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:xmlLang", &(a->ns3__FaultException_x002eFaultReasonData::xmlLang), "xsd:string"))
				{	soap_flag_xmlLang1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__FaultException_x002eFaultReasonData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__FaultException_x002eFaultReasonData, 0, sizeof(ns3__FaultException_x002eFaultReasonData), 0, soap_copy_ns3__FaultException_x002eFaultReasonData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__FaultException_x002eFaultReasonData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__FaultException_x002eFaultReasonData);
	if (this->soap_out(soap, tag?tag:"ns3:FaultException.FaultReasonData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__FaultException_x002eFaultReasonData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__FaultException_x002eFaultReasonData(soap, this, tag, type);
}

SOAP_FMAC3 ns3__FaultException_x002eFaultReasonData * SOAP_FMAC4 soap_get_ns3__FaultException_x002eFaultReasonData(struct soap *soap, ns3__FaultException_x002eFaultReasonData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__FaultException_x002eFaultReasonData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__FaultException_x002eFaultReasonData * SOAP_FMAC2 soap_instantiate_ns3__FaultException_x002eFaultReasonData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__FaultException_x002eFaultReasonData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__FaultException_x002eFaultReasonData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__FaultException_x002eFaultReasonData);
		if (size)
			*size = sizeof(ns3__FaultException_x002eFaultReasonData);
		((ns3__FaultException_x002eFaultReasonData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__FaultException_x002eFaultReasonData, n);
		if (size)
			*size = n * sizeof(ns3__FaultException_x002eFaultReasonData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__FaultException_x002eFaultReasonData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__FaultException_x002eFaultReasonData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__FaultException_x002eFaultReasonData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__FaultException_x002eFaultReasonData %p -> %p\n", q, p));
	*(ns3__FaultException_x002eFaultReasonData*)p = *(ns3__FaultException_x002eFaultReasonData*)q;
}

void ns3__ArrayOfFaultException_x002eFaultCodeData::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(soap, &this->ns3__ArrayOfFaultException_x002eFaultCodeData::FaultException_x002eFaultCodeData);
	/* transient soap skipped */
}

void ns3__ArrayOfFaultException_x002eFaultCodeData::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(soap, &this->ns3__ArrayOfFaultException_x002eFaultCodeData::FaultException_x002eFaultCodeData);
	/* transient soap skipped */
#endif
}

int ns3__ArrayOfFaultException_x002eFaultCodeData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__ArrayOfFaultException_x002eFaultCodeData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfFaultException_x002eFaultCodeData(struct soap *soap, const char *tag, int id, const ns3__ArrayOfFaultException_x002eFaultCodeData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(soap, "ns3:FaultException.FaultCodeData", -1, &(a->ns3__ArrayOfFaultException_x002eFaultCodeData::FaultException_x002eFaultCodeData), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__ArrayOfFaultException_x002eFaultCodeData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__ArrayOfFaultException_x002eFaultCodeData(soap, tag, this, type);
}

SOAP_FMAC3 ns3__ArrayOfFaultException_x002eFaultCodeData * SOAP_FMAC4 soap_in_ns3__ArrayOfFaultException_x002eFaultCodeData(struct soap *soap, const char *tag, ns3__ArrayOfFaultException_x002eFaultCodeData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__ArrayOfFaultException_x002eFaultCodeData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData, sizeof(ns3__ArrayOfFaultException_x002eFaultCodeData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__ArrayOfFaultException_x002eFaultCodeData *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(soap, "ns3:FaultException.FaultCodeData", &(a->ns3__ArrayOfFaultException_x002eFaultCodeData::FaultException_x002eFaultCodeData), "ns3:FaultException.FaultCodeData"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__ArrayOfFaultException_x002eFaultCodeData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData, 0, sizeof(ns3__ArrayOfFaultException_x002eFaultCodeData), 0, soap_copy_ns3__ArrayOfFaultException_x002eFaultCodeData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__ArrayOfFaultException_x002eFaultCodeData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData);
	if (this->soap_out(soap, tag?tag:"ns3:ArrayOfFaultException.FaultCodeData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__ArrayOfFaultException_x002eFaultCodeData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__ArrayOfFaultException_x002eFaultCodeData(soap, this, tag, type);
}

SOAP_FMAC3 ns3__ArrayOfFaultException_x002eFaultCodeData * SOAP_FMAC4 soap_get_ns3__ArrayOfFaultException_x002eFaultCodeData(struct soap *soap, ns3__ArrayOfFaultException_x002eFaultCodeData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__ArrayOfFaultException_x002eFaultCodeData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__ArrayOfFaultException_x002eFaultCodeData * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFaultException_x002eFaultCodeData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__ArrayOfFaultException_x002eFaultCodeData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__ArrayOfFaultException_x002eFaultCodeData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__ArrayOfFaultException_x002eFaultCodeData);
		if (size)
			*size = sizeof(ns3__ArrayOfFaultException_x002eFaultCodeData);
		((ns3__ArrayOfFaultException_x002eFaultCodeData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__ArrayOfFaultException_x002eFaultCodeData, n);
		if (size)
			*size = n * sizeof(ns3__ArrayOfFaultException_x002eFaultCodeData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__ArrayOfFaultException_x002eFaultCodeData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__ArrayOfFaultException_x002eFaultCodeData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ArrayOfFaultException_x002eFaultCodeData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__ArrayOfFaultException_x002eFaultCodeData %p -> %p\n", q, p));
	*(ns3__ArrayOfFaultException_x002eFaultCodeData*)p = *(ns3__ArrayOfFaultException_x002eFaultCodeData*)q;
}

void ns3__FaultException_x002eFaultCodeData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__FaultException_x002eFaultCodeData::name = NULL;
	this->ns3__FaultException_x002eFaultCodeData::ns = NULL;
	/* transient soap skipped */
}

void ns3__FaultException_x002eFaultCodeData::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns3__FaultException_x002eFaultCodeData::name);
	soap_serialize_PointerTostd__string(soap, &this->ns3__FaultException_x002eFaultCodeData::ns);
	/* transient soap skipped */
#endif
}

int ns3__FaultException_x002eFaultCodeData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__FaultException_x002eFaultCodeData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FaultException_x002eFaultCodeData(struct soap *soap, const char *tag, int id, const ns3__FaultException_x002eFaultCodeData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__FaultException_x002eFaultCodeData), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:name", -1, &(a->ns3__FaultException_x002eFaultCodeData::name), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:ns", -1, &(a->ns3__FaultException_x002eFaultCodeData::ns), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__FaultException_x002eFaultCodeData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__FaultException_x002eFaultCodeData(soap, tag, this, type);
}

SOAP_FMAC3 ns3__FaultException_x002eFaultCodeData * SOAP_FMAC4 soap_in_ns3__FaultException_x002eFaultCodeData(struct soap *soap, const char *tag, ns3__FaultException_x002eFaultCodeData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__FaultException_x002eFaultCodeData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__FaultException_x002eFaultCodeData, sizeof(ns3__FaultException_x002eFaultCodeData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__FaultException_x002eFaultCodeData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__FaultException_x002eFaultCodeData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_ns1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:name", &(a->ns3__FaultException_x002eFaultCodeData::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_ns1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:ns", &(a->ns3__FaultException_x002eFaultCodeData::ns), "xsd:string"))
				{	soap_flag_ns1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__FaultException_x002eFaultCodeData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__FaultException_x002eFaultCodeData, 0, sizeof(ns3__FaultException_x002eFaultCodeData), 0, soap_copy_ns3__FaultException_x002eFaultCodeData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__FaultException_x002eFaultCodeData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__FaultException_x002eFaultCodeData);
	if (this->soap_out(soap, tag?tag:"ns3:FaultException.FaultCodeData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__FaultException_x002eFaultCodeData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__FaultException_x002eFaultCodeData(soap, this, tag, type);
}

SOAP_FMAC3 ns3__FaultException_x002eFaultCodeData * SOAP_FMAC4 soap_get_ns3__FaultException_x002eFaultCodeData(struct soap *soap, ns3__FaultException_x002eFaultCodeData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__FaultException_x002eFaultCodeData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__FaultException_x002eFaultCodeData * SOAP_FMAC2 soap_instantiate_ns3__FaultException_x002eFaultCodeData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__FaultException_x002eFaultCodeData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__FaultException_x002eFaultCodeData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__FaultException_x002eFaultCodeData);
		if (size)
			*size = sizeof(ns3__FaultException_x002eFaultCodeData);
		((ns3__FaultException_x002eFaultCodeData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__FaultException_x002eFaultCodeData, n);
		if (size)
			*size = n * sizeof(ns3__FaultException_x002eFaultCodeData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__FaultException_x002eFaultCodeData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__FaultException_x002eFaultCodeData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__FaultException_x002eFaultCodeData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__FaultException_x002eFaultCodeData %p -> %p\n", q, p));
	*(ns3__FaultException_x002eFaultCodeData*)p = *(ns3__FaultException_x002eFaultCodeData*)q;
}

void ns3__CommunicationException::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns4__SystemException::soap_default(soap);
}

void ns3__CommunicationException::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns4__SystemException::soap_serialize(soap);
#endif
}

int ns3__CommunicationException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__CommunicationException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CommunicationException(struct soap *soap, const char *tag, int id, const ns3__CommunicationException *a, const char *type)
{
	soap_set_attr(soap, "ser:FactoryType", soap_int2s(soap, ((ns4__Exception*)a)->_ser__FactoryType), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__CommunicationException), "ns3:CommunicationException"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->ns4__Exception::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__CommunicationException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__CommunicationException(soap, tag, this, type);
}

SOAP_FMAC3 ns3__CommunicationException * SOAP_FMAC4 soap_in_ns3__CommunicationException(struct soap *soap, const char *tag, ns3__CommunicationException *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__CommunicationException *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__CommunicationException, sizeof(ns3__CommunicationException), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__CommunicationException)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__CommunicationException *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2int(soap, soap_attr_value(soap, "ser:FactoryType", 0), &((ns4__Exception*)a)->_ser__FactoryType))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->ns4__Exception::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__CommunicationException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__CommunicationException, 0, sizeof(ns3__CommunicationException), 0, soap_copy_ns3__CommunicationException);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__CommunicationException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__CommunicationException);
	if (this->soap_out(soap, tag?tag:"ns3:CommunicationException", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__CommunicationException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__CommunicationException(soap, this, tag, type);
}

SOAP_FMAC3 ns3__CommunicationException * SOAP_FMAC4 soap_get_ns3__CommunicationException(struct soap *soap, ns3__CommunicationException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__CommunicationException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__CommunicationException * SOAP_FMAC2 soap_instantiate_ns3__CommunicationException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__CommunicationException(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__CommunicationException, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "ns3:FaultException"))
	{	cp->type = SOAP_TYPE_ns3__FaultException;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__FaultException);
			if (size)
				*size = sizeof(ns3__FaultException);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__FaultException, n);
			if (size)
				*size = n * sizeof(ns3__FaultException);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns3__FaultException*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__CommunicationException);
		if (size)
			*size = sizeof(ns3__CommunicationException);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__CommunicationException, n);
		if (size)
			*size = n * sizeof(ns3__CommunicationException);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__CommunicationException*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__CommunicationException(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__CommunicationException %p -> %p\n", q, p));
	*(ns3__CommunicationException*)p = *(ns3__CommunicationException*)q;
}

void ns3__FaultException::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns3__CommunicationException::soap_default(soap);
}

void ns3__FaultException::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns3__CommunicationException::soap_serialize(soap);
#endif
}

int ns3__FaultException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__FaultException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FaultException(struct soap *soap, const char *tag, int id, const ns3__FaultException *a, const char *type)
{
	soap_set_attr(soap, "ser:FactoryType", soap_int2s(soap, ((ns4__Exception*)a)->_ser__FactoryType), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__FaultException), "ns3:FaultException"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->ns4__Exception::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__FaultException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__FaultException(soap, tag, this, type);
}

SOAP_FMAC3 ns3__FaultException * SOAP_FMAC4 soap_in_ns3__FaultException(struct soap *soap, const char *tag, ns3__FaultException *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__FaultException *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__FaultException, sizeof(ns3__FaultException), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__FaultException)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__FaultException *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2int(soap, soap_attr_value(soap, "ser:FactoryType", 0), &((ns4__Exception*)a)->_ser__FactoryType))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->ns4__Exception::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__FaultException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__FaultException, 0, sizeof(ns3__FaultException), 0, soap_copy_ns3__FaultException);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns3__FaultException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__FaultException);
	if (this->soap_out(soap, tag?tag:"ns3:FaultException", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__FaultException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__FaultException(soap, this, tag, type);
}

SOAP_FMAC3 ns3__FaultException * SOAP_FMAC4 soap_get_ns3__FaultException(struct soap *soap, ns3__FaultException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__FaultException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__FaultException * SOAP_FMAC2 soap_instantiate_ns3__FaultException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__FaultException(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__FaultException, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__FaultException);
		if (size)
			*size = sizeof(ns3__FaultException);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__FaultException, n);
		if (size)
			*size = n * sizeof(ns3__FaultException);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__FaultException*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__FaultException(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__FaultException %p -> %p\n", q, p));
	*(ns3__FaultException*)p = *(ns3__FaultException*)q;
}

void _ns1__LogoutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__LogoutResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__LogoutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LogoutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LogoutResponse(struct soap *soap, const char *tag, int id, const _ns1__LogoutResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LogoutResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LogoutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LogoutResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LogoutResponse * SOAP_FMAC4 soap_in__ns1__LogoutResponse(struct soap *soap, const char *tag, _ns1__LogoutResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LogoutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LogoutResponse, sizeof(_ns1__LogoutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LogoutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LogoutResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LogoutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LogoutResponse, 0, sizeof(_ns1__LogoutResponse), 0, soap_copy__ns1__LogoutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LogoutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LogoutResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LogoutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LogoutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LogoutResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LogoutResponse * SOAP_FMAC4 soap_get__ns1__LogoutResponse(struct soap *soap, _ns1__LogoutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LogoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LogoutResponse * SOAP_FMAC2 soap_instantiate__ns1__LogoutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LogoutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LogoutResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LogoutResponse);
		if (size)
			*size = sizeof(_ns1__LogoutResponse);
		((_ns1__LogoutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LogoutResponse, n);
		if (size)
			*size = n * sizeof(_ns1__LogoutResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LogoutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LogoutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LogoutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LogoutResponse %p -> %p\n", q, p));
	*(_ns1__LogoutResponse*)p = *(_ns1__LogoutResponse*)q;
}

void _ns1__Logout::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Logout::Token = NULL;
	/* transient soap skipped */
}

void _ns1__Logout::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Logout::Token);
	/* transient soap skipped */
#endif
}

int _ns1__Logout::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Logout(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Logout(struct soap *soap, const char *tag, int id, const _ns1__Logout *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Logout), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Token", -1, &(a->_ns1__Logout::Token), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Logout::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Logout(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Logout * SOAP_FMAC4 soap_in__ns1__Logout(struct soap *soap, const char *tag, _ns1__Logout *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Logout *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Logout, sizeof(_ns1__Logout), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Logout)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Logout *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Token1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Token1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:Token", &(a->_ns1__Logout::Token), "xsd:string"))
				{	soap_flag_Token1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Logout *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Logout, 0, sizeof(_ns1__Logout), 0, soap_copy__ns1__Logout);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__Logout::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Logout);
	if (this->soap_out(soap, tag?tag:"ns1:Logout", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Logout::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Logout(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Logout * SOAP_FMAC4 soap_get__ns1__Logout(struct soap *soap, _ns1__Logout *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Logout * SOAP_FMAC2 soap_instantiate__ns1__Logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Logout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Logout, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Logout);
		if (size)
			*size = sizeof(_ns1__Logout);
		((_ns1__Logout*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Logout, n);
		if (size)
			*size = n * sizeof(_ns1__Logout);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Logout*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Logout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Logout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Logout %p -> %p\n", q, p));
	*(_ns1__Logout*)p = *(_ns1__Logout*)q;
}

void _ns1__GetGraphResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetGraphResponse::GetGraphResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetGraphResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons5__Graph(soap, &this->_ns1__GetGraphResponse::GetGraphResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetGraphResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetGraphResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGraphResponse(struct soap *soap, const char *tag, int id, const _ns1__GetGraphResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetGraphResponse), type))
		return soap->error;
	if (a->GetGraphResult)
		soap_element_result(soap, "ns1:GetGraphResult");
	if (soap_out_PointerTons5__Graph(soap, "ns1:GetGraphResult", -1, &(a->_ns1__GetGraphResponse::GetGraphResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetGraphResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetGraphResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetGraphResponse * SOAP_FMAC4 soap_in__ns1__GetGraphResponse(struct soap *soap, const char *tag, _ns1__GetGraphResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetGraphResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetGraphResponse, sizeof(_ns1__GetGraphResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetGraphResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetGraphResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetGraphResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetGraphResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__Graph(soap, "ns1:GetGraphResult", &(a->_ns1__GetGraphResponse::GetGraphResult), "ns5:Graph"))
				{	soap_flag_GetGraphResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetGraphResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetGraphResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetGraphResponse, 0, sizeof(_ns1__GetGraphResponse), 0, soap_copy__ns1__GetGraphResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetGraphResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetGraphResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetGraphResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetGraphResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetGraphResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetGraphResponse * SOAP_FMAC4 soap_get__ns1__GetGraphResponse(struct soap *soap, _ns1__GetGraphResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetGraphResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetGraphResponse * SOAP_FMAC2 soap_instantiate__ns1__GetGraphResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetGraphResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetGraphResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetGraphResponse);
		if (size)
			*size = sizeof(_ns1__GetGraphResponse);
		((_ns1__GetGraphResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetGraphResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetGraphResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetGraphResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetGraphResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetGraphResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetGraphResponse %p -> %p\n", q, p));
	*(_ns1__GetGraphResponse*)p = *(_ns1__GetGraphResponse*)q;
}

void _ns1__GetGraph::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetGraph::Token = NULL;
	this->_ns1__GetGraph::Email = NULL;
	this->_ns1__GetGraph::graphDepth = NULL;
	/* transient soap skipped */
}

void _ns1__GetGraph::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetGraph::Token);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetGraph::Email);
	soap_serialize_PointerToint(soap, &this->_ns1__GetGraph::graphDepth);
	/* transient soap skipped */
#endif
}

int _ns1__GetGraph::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetGraph(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGraph(struct soap *soap, const char *tag, int id, const _ns1__GetGraph *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetGraph), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Token", -1, &(a->_ns1__GetGraph::Token), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Email", -1, &(a->_ns1__GetGraph::Email), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:graphDepth", -1, &(a->_ns1__GetGraph::graphDepth), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetGraph::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetGraph(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetGraph * SOAP_FMAC4 soap_in__ns1__GetGraph(struct soap *soap, const char *tag, _ns1__GetGraph *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetGraph *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetGraph, sizeof(_ns1__GetGraph), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetGraph)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetGraph *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Token1 = 1;
	size_t soap_flag_Email1 = 1;
	size_t soap_flag_graphDepth1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Token1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:Token", &(a->_ns1__GetGraph::Token), "xsd:string"))
				{	soap_flag_Token1--;
					continue;
				}
			if (soap_flag_Email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:Email", &(a->_ns1__GetGraph::Email), "xsd:string"))
				{	soap_flag_Email1--;
					continue;
				}
			if (soap_flag_graphDepth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:graphDepth", &(a->_ns1__GetGraph::graphDepth), "xsd:int"))
				{	soap_flag_graphDepth1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetGraph *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetGraph, 0, sizeof(_ns1__GetGraph), 0, soap_copy__ns1__GetGraph);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetGraph::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetGraph);
	if (this->soap_out(soap, tag?tag:"ns1:GetGraph", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetGraph::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetGraph(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetGraph * SOAP_FMAC4 soap_get__ns1__GetGraph(struct soap *soap, _ns1__GetGraph *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetGraph(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetGraph * SOAP_FMAC2 soap_instantiate__ns1__GetGraph(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetGraph(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetGraph, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetGraph);
		if (size)
			*size = sizeof(_ns1__GetGraph);
		((_ns1__GetGraph*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetGraph, n);
		if (size)
			*size = n * sizeof(_ns1__GetGraph);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetGraph*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetGraph*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetGraph(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetGraph %p -> %p\n", q, p));
	*(_ns1__GetGraph*)p = *(_ns1__GetGraph*)q;
}

void _ns1__LoginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LoginResponse::LoginResult = NULL;
	/* transient soap skipped */
}

void _ns1__LoginResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__LoginResponse::LoginResult);
	/* transient soap skipped */
#endif
}

int _ns1__LoginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LoginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginResponse(struct soap *soap, const char *tag, int id, const _ns1__LoginResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LoginResponse), type))
		return soap->error;
	if (a->LoginResult)
		soap_element_result(soap, "ns1:LoginResult");
	if (soap_out_PointerTostd__string(soap, "ns1:LoginResult", -1, &(a->_ns1__LoginResponse::LoginResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LoginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LoginResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_in__ns1__LoginResponse(struct soap *soap, const char *tag, _ns1__LoginResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LoginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LoginResponse, sizeof(_ns1__LoginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LoginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LoginResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LoginResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LoginResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:LoginResult", &(a->_ns1__LoginResponse::LoginResult), "xsd:string"))
				{	soap_flag_LoginResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LoginResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LoginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LoginResponse, 0, sizeof(_ns1__LoginResponse), 0, soap_copy__ns1__LoginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LoginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LoginResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LoginResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LoginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LoginResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_get__ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LoginResponse * SOAP_FMAC2 soap_instantiate__ns1__LoginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LoginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LoginResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LoginResponse);
		if (size)
			*size = sizeof(_ns1__LoginResponse);
		((_ns1__LoginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LoginResponse, n);
		if (size)
			*size = n * sizeof(_ns1__LoginResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LoginResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LoginResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LoginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LoginResponse %p -> %p\n", q, p));
	*(_ns1__LoginResponse*)p = *(_ns1__LoginResponse*)q;
}

void _ns1__Login::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Login::Email = NULL;
	this->_ns1__Login::Password = NULL;
	/* transient soap skipped */
}

void _ns1__Login::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Login::Email);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Login::Password);
	/* transient soap skipped */
#endif
}

int _ns1__Login::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Login(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Login(struct soap *soap, const char *tag, int id, const _ns1__Login *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Login), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Email", -1, &(a->_ns1__Login::Email), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Password", -1, &(a->_ns1__Login::Password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Login::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Login(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_in__ns1__Login(struct soap *soap, const char *tag, _ns1__Login *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Login, sizeof(_ns1__Login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Login)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Login *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Email1 = 1;
	size_t soap_flag_Password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:Email", &(a->_ns1__Login::Email), "xsd:string"))
				{	soap_flag_Email1--;
					continue;
				}
			if (soap_flag_Password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:Password", &(a->_ns1__Login::Password), "xsd:string"))
				{	soap_flag_Password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Login, 0, sizeof(_ns1__Login), 0, soap_copy__ns1__Login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__Login::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Login);
	if (this->soap_out(soap, tag?tag:"ns1:Login", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Login::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Login(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_get__ns1__Login(struct soap *soap, _ns1__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Login * SOAP_FMAC2 soap_instantiate__ns1__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Login);
		if (size)
			*size = sizeof(_ns1__Login);
		((_ns1__Login*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Login, n);
		if (size)
			*size = n * sizeof(_ns1__Login);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Login*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Login %p -> %p\n", q, p));
	*(_ns1__Login*)p = *(_ns1__Login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Logout(struct soap *soap, struct __ns1__Logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Logout = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Logout(struct soap *soap, const struct __ns1__Logout *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Logout(soap, &a->ns1__Logout);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Logout(struct soap *soap, const char *tag, int id, const struct __ns1__Logout *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Logout(soap, "ns1:Logout", -1, &a->ns1__Logout, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Logout * SOAP_FMAC4 soap_in___ns1__Logout(struct soap *soap, const char *tag, struct __ns1__Logout *a, const char *type)
{
	size_t soap_flag_ns1__Logout = 1;
	short soap_flag;
	a = (struct __ns1__Logout *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Logout, sizeof(struct __ns1__Logout), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Logout(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Logout && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Logout(soap, "ns1:Logout", &a->ns1__Logout, ""))
				{	soap_flag_ns1__Logout--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Logout(struct soap *soap, const struct __ns1__Logout *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Logout(soap, tag?tag:"-ns1:Logout", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Logout * SOAP_FMAC4 soap_get___ns1__Logout(struct soap *soap, struct __ns1__Logout *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Logout * SOAP_FMAC2 soap_instantiate___ns1__Logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Logout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Logout, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Logout);
		if (size)
			*size = sizeof(struct __ns1__Logout);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Logout, n);
		if (size)
			*size = n * sizeof(struct __ns1__Logout);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Logout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Logout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Logout %p -> %p\n", q, p));
	*(struct __ns1__Logout*)p = *(struct __ns1__Logout*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetGraph(struct soap *soap, struct __ns1__GetGraph *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetGraph = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetGraph(struct soap *soap, const struct __ns1__GetGraph *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetGraph(soap, &a->ns1__GetGraph);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetGraph(struct soap *soap, const char *tag, int id, const struct __ns1__GetGraph *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetGraph(soap, "ns1:GetGraph", -1, &a->ns1__GetGraph, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetGraph * SOAP_FMAC4 soap_in___ns1__GetGraph(struct soap *soap, const char *tag, struct __ns1__GetGraph *a, const char *type)
{
	size_t soap_flag_ns1__GetGraph = 1;
	short soap_flag;
	a = (struct __ns1__GetGraph *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetGraph, sizeof(struct __ns1__GetGraph), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetGraph(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetGraph && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetGraph(soap, "ns1:GetGraph", &a->ns1__GetGraph, ""))
				{	soap_flag_ns1__GetGraph--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetGraph(struct soap *soap, const struct __ns1__GetGraph *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetGraph(soap, tag?tag:"-ns1:GetGraph", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetGraph * SOAP_FMAC4 soap_get___ns1__GetGraph(struct soap *soap, struct __ns1__GetGraph *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetGraph(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetGraph * SOAP_FMAC2 soap_instantiate___ns1__GetGraph(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetGraph(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetGraph, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetGraph);
		if (size)
			*size = sizeof(struct __ns1__GetGraph);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetGraph, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetGraph);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetGraph*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetGraph(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetGraph %p -> %p\n", q, p));
	*(struct __ns1__GetGraph*)p = *(struct __ns1__GetGraph*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login(struct soap *soap, struct __ns1__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login(struct soap *soap, const struct __ns1__Login *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Login(soap, &a->ns1__Login);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login(struct soap *soap, const char *tag, int id, const struct __ns1__Login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Login(soap, "ns1:Login", -1, &a->ns1__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_in___ns1__Login(struct soap *soap, const char *tag, struct __ns1__Login *a, const char *type)
{
	size_t soap_flag_ns1__Login = 1;
	short soap_flag;
	a = (struct __ns1__Login *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Login, sizeof(struct __ns1__Login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Login(soap, "ns1:Login", &a->ns1__Login, ""))
				{	soap_flag_ns1__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login(struct soap *soap, const struct __ns1__Login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Login(soap, tag?tag:"-ns1:Login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_get___ns1__Login(struct soap *soap, struct __ns1__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Login * SOAP_FMAC2 soap_instantiate___ns1__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Login);
		if (size)
			*size = sizeof(struct __ns1__Login);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Login, n);
		if (size)
			*size = n * sizeof(struct __ns1__Login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Login %p -> %p\n", q, p));
	*(struct __ns1__Login*)p = *(struct __ns1__Login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->ns3__FaultException_ = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__FaultException(soap, &a->ns3__FaultException_);
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_out_PointerTons3__FaultException(soap, "ns3:FaultException", -1, &a->ns3__FaultException_, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_ns3__FaultException_ = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__FaultException_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__FaultException(soap, "ns3:FaultException", &a->ns3__FaultException_, "ns3:FaultException"))
				{	soap_flag_ns3__FaultException_--;
					continue;
				}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fault > 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ser__anyType(struct soap *soap, struct __ser__anyType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->ser__anyType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ser__anyType(struct soap *soap, const struct __ser__anyType *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->ser__anyType, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ser__anyType(struct soap *soap, const char *tag, int id, const struct __ser__anyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_putelement(soap, a->ser__anyType, "ser:anyType", -1, a->__type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ser__anyType * SOAP_FMAC4 soap_in___ser__anyType(struct soap *soap, const char *tag, struct __ser__anyType *a, const char *type)
{
	size_t soap_flag_ser__anyType = 1;
	short soap_flag;
	a = (struct __ser__anyType *)soap_id_enter(soap, "", a, SOAP_TYPE___ser__anyType, sizeof(struct __ser__anyType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ser__anyType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ser__anyType && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ser__anyType = soap_getelement(soap, &a->__type)))
				{	soap_flag_ser__anyType = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ser__anyType > 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ser__anyType(struct soap *soap, const struct __ser__anyType *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ser__anyType(soap, tag?tag:"-ser:anyType", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ser__anyType * SOAP_FMAC4 soap_get___ser__anyType(struct soap *soap, struct __ser__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in___ser__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ser__anyType * SOAP_FMAC2 soap_instantiate___ser__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ser__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ser__anyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ser__anyType);
		if (size)
			*size = sizeof(struct __ser__anyType);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ser__anyType, n);
		if (size)
			*size = n * sizeof(struct __ser__anyType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ser__anyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ser__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ser__anyType %p -> %p\n", q, p));
	*(struct __ser__anyType*)p = *(struct __ser__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LogoutResponse(struct soap *soap, _ns1__LogoutResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LogoutResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LogoutResponse(struct soap *soap, const char *tag, int id, _ns1__LogoutResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LogoutResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LogoutResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__LogoutResponse(struct soap *soap, const char *tag, _ns1__LogoutResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LogoutResponse **)soap_malloc(soap, sizeof(_ns1__LogoutResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LogoutResponse *)soap_instantiate__ns1__LogoutResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LogoutResponse ** p = (_ns1__LogoutResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LogoutResponse, sizeof(_ns1__LogoutResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LogoutResponse(struct soap *soap, _ns1__LogoutResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LogoutResponse);
	if (soap_out_PointerTo_ns1__LogoutResponse(soap, tag?tag:"ns1:LogoutResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LogoutResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__LogoutResponse(struct soap *soap, _ns1__LogoutResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LogoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Logout(struct soap *soap, _ns1__Logout *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Logout))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Logout(struct soap *soap, const char *tag, int id, _ns1__Logout *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Logout);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Logout ** SOAP_FMAC4 soap_in_PointerTo_ns1__Logout(struct soap *soap, const char *tag, _ns1__Logout **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Logout **)soap_malloc(soap, sizeof(_ns1__Logout *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Logout *)soap_instantiate__ns1__Logout(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Logout ** p = (_ns1__Logout **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Logout, sizeof(_ns1__Logout), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Logout(struct soap *soap, _ns1__Logout *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Logout);
	if (soap_out_PointerTo_ns1__Logout(soap, tag?tag:"ns1:Logout", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Logout ** SOAP_FMAC4 soap_get_PointerTo_ns1__Logout(struct soap *soap, _ns1__Logout **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetGraphResponse(struct soap *soap, _ns1__GetGraphResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetGraphResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetGraphResponse(struct soap *soap, const char *tag, int id, _ns1__GetGraphResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetGraphResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetGraphResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetGraphResponse(struct soap *soap, const char *tag, _ns1__GetGraphResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetGraphResponse **)soap_malloc(soap, sizeof(_ns1__GetGraphResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetGraphResponse *)soap_instantiate__ns1__GetGraphResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetGraphResponse ** p = (_ns1__GetGraphResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetGraphResponse, sizeof(_ns1__GetGraphResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetGraphResponse(struct soap *soap, _ns1__GetGraphResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetGraphResponse);
	if (soap_out_PointerTo_ns1__GetGraphResponse(soap, tag?tag:"ns1:GetGraphResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetGraphResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetGraphResponse(struct soap *soap, _ns1__GetGraphResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetGraphResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetGraph(struct soap *soap, _ns1__GetGraph *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetGraph))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetGraph(struct soap *soap, const char *tag, int id, _ns1__GetGraph *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetGraph);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetGraph ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetGraph(struct soap *soap, const char *tag, _ns1__GetGraph **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetGraph **)soap_malloc(soap, sizeof(_ns1__GetGraph *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetGraph *)soap_instantiate__ns1__GetGraph(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetGraph ** p = (_ns1__GetGraph **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetGraph, sizeof(_ns1__GetGraph), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetGraph(struct soap *soap, _ns1__GetGraph *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetGraph);
	if (soap_out_PointerTo_ns1__GetGraph(soap, tag?tag:"ns1:GetGraph", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetGraph ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetGraph(struct soap *soap, _ns1__GetGraph **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetGraph(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LoginResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LoginResponse(struct soap *soap, const char *tag, int id, _ns1__LoginResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LoginResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LoginResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__LoginResponse(struct soap *soap, const char *tag, _ns1__LoginResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LoginResponse **)soap_malloc(soap, sizeof(_ns1__LoginResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LoginResponse *)soap_instantiate__ns1__LoginResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LoginResponse ** p = (_ns1__LoginResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LoginResponse, sizeof(_ns1__LoginResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LoginResponse);
	if (soap_out_PointerTo_ns1__LoginResponse(soap, tag?tag:"ns1:LoginResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LoginResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Login(struct soap *soap, _ns1__Login *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Login))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Login(struct soap *soap, const char *tag, int id, _ns1__Login *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Login);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_in_PointerTo_ns1__Login(struct soap *soap, const char *tag, _ns1__Login **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Login **)soap_malloc(soap, sizeof(_ns1__Login *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Login *)soap_instantiate__ns1__Login(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Login ** p = (_ns1__Login **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Login, sizeof(_ns1__Login), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Login(struct soap *soap, _ns1__Login *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Login);
	if (soap_out_PointerTo_ns1__Login(soap, tag?tag:"ns1:Login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_get_PointerTo_ns1__Login(struct soap *soap, _ns1__Login **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FaultException(struct soap *soap, ns3__FaultException *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__FaultException))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FaultException(struct soap *soap, const char *tag, int id, ns3__FaultException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__FaultException);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__FaultException ** SOAP_FMAC4 soap_in_PointerTons3__FaultException(struct soap *soap, const char *tag, ns3__FaultException **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__FaultException **)soap_malloc(soap, sizeof(ns3__FaultException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__FaultException *)soap_instantiate_ns3__FaultException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__FaultException ** p = (ns3__FaultException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__FaultException, sizeof(ns3__FaultException), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FaultException(struct soap *soap, ns3__FaultException *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__FaultException);
	if (soap_out_PointerTons3__FaultException(soap, tag?tag:"ns3:FaultException", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__FaultException ** SOAP_FMAC4 soap_get_PointerTons3__FaultException(struct soap *soap, ns3__FaultException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__FaultException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfint(struct soap *soap, arr__ArrayOfint *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_arr__ArrayOfint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfint(struct soap *soap, const char *tag, int id, arr__ArrayOfint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_arr__ArrayOfint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 arr__ArrayOfint ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfint(struct soap *soap, const char *tag, arr__ArrayOfint **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (arr__ArrayOfint **)soap_malloc(soap, sizeof(arr__ArrayOfint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (arr__ArrayOfint *)soap_instantiate_arr__ArrayOfint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	arr__ArrayOfint ** p = (arr__ArrayOfint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_arr__ArrayOfint, sizeof(arr__ArrayOfint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfint(struct soap *soap, arr__ArrayOfint *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToarr__ArrayOfint);
	if (soap_out_PointerToarr__ArrayOfint(soap, tag?tag:"arr:ArrayOfint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 arr__ArrayOfint ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfint(struct soap *soap, arr__ArrayOfint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToarr__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__User(struct soap *soap, ns5__User *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__User))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__User(struct soap *soap, const char *tag, int id, ns5__User *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__User);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__User ** SOAP_FMAC4 soap_in_PointerTons5__User(struct soap *soap, const char *tag, ns5__User **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__User **)soap_malloc(soap, sizeof(ns5__User *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__User *)soap_instantiate_ns5__User(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__User ** p = (ns5__User **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__User, sizeof(ns5__User), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__User(struct soap *soap, ns5__User *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__User);
	if (soap_out_PointerTons5__User(soap, tag?tag:"ns5:User", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__User ** SOAP_FMAC4 soap_get_PointerTons5__User(struct soap *soap, ns5__User **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__User(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Relationship(struct soap *soap, ns5__Relationship *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__Relationship))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Relationship(struct soap *soap, const char *tag, int id, ns5__Relationship *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__Relationship);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__Relationship ** SOAP_FMAC4 soap_in_PointerTons5__Relationship(struct soap *soap, const char *tag, ns5__Relationship **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__Relationship **)soap_malloc(soap, sizeof(ns5__Relationship *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__Relationship *)soap_instantiate_ns5__Relationship(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__Relationship ** p = (ns5__Relationship **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__Relationship, sizeof(ns5__Relationship), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Relationship(struct soap *soap, ns5__Relationship *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__Relationship);
	if (soap_out_PointerTons5__Relationship(soap, tag?tag:"ns5:Relationship", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__Relationship ** SOAP_FMAC4 soap_get_PointerTons5__Relationship(struct soap *soap, ns5__Relationship **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__Relationship(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RelationshipTag(struct soap *soap, ns5__RelationshipTag *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__RelationshipTag))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RelationshipTag(struct soap *soap, const char *tag, int id, ns5__RelationshipTag *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__RelationshipTag);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__RelationshipTag ** SOAP_FMAC4 soap_in_PointerTons5__RelationshipTag(struct soap *soap, const char *tag, ns5__RelationshipTag **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__RelationshipTag **)soap_malloc(soap, sizeof(ns5__RelationshipTag *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__RelationshipTag *)soap_instantiate_ns5__RelationshipTag(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__RelationshipTag ** p = (ns5__RelationshipTag **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__RelationshipTag, sizeof(ns5__RelationshipTag), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RelationshipTag(struct soap *soap, ns5__RelationshipTag *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__RelationshipTag);
	if (soap_out_PointerTons5__RelationshipTag(soap, tag?tag:"ns5:RelationshipTag", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__RelationshipTag ** SOAP_FMAC4 soap_get_PointerTons5__RelationshipTag(struct soap *soap, ns5__RelationshipTag **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__RelationshipTag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Interest(struct soap *soap, ns5__Interest *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__Interest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Interest(struct soap *soap, const char *tag, int id, ns5__Interest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__Interest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__Interest ** SOAP_FMAC4 soap_in_PointerTons5__Interest(struct soap *soap, const char *tag, ns5__Interest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__Interest **)soap_malloc(soap, sizeof(ns5__Interest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__Interest *)soap_instantiate_ns5__Interest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__Interest ** p = (ns5__Interest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__Interest, sizeof(ns5__Interest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Interest(struct soap *soap, ns5__Interest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__Interest);
	if (soap_out_PointerTons5__Interest(soap, tag?tag:"ns5:Interest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__Interest ** SOAP_FMAC4 soap_get_PointerTons5__Interest(struct soap *soap, ns5__Interest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__Interest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__HumourStatus(struct soap *soap, ns5__HumourStatus *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__HumourStatus))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__HumourStatus(struct soap *soap, const char *tag, int id, ns5__HumourStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__HumourStatus);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__HumourStatus ** SOAP_FMAC4 soap_in_PointerTons5__HumourStatus(struct soap *soap, const char *tag, ns5__HumourStatus **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__HumourStatus **)soap_malloc(soap, sizeof(ns5__HumourStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__HumourStatus *)soap_instantiate_ns5__HumourStatus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__HumourStatus ** p = (ns5__HumourStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__HumourStatus, sizeof(ns5__HumourStatus), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__HumourStatus(struct soap *soap, ns5__HumourStatus *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__HumourStatus);
	if (soap_out_PointerTons5__HumourStatus(soap, tag?tag:"ns5:HumourStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__HumourStatus ** SOAP_FMAC4 soap_get_PointerTons5__HumourStatus(struct soap *soap, ns5__HumourStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__HumourStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfUser(struct soap *soap, ns5__ArrayOfUser *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfUser))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfUser(struct soap *soap, const char *tag, int id, ns5__ArrayOfUser *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfUser);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__ArrayOfUser ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfUser(struct soap *soap, const char *tag, ns5__ArrayOfUser **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfUser **)soap_malloc(soap, sizeof(ns5__ArrayOfUser *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfUser *)soap_instantiate_ns5__ArrayOfUser(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__ArrayOfUser ** p = (ns5__ArrayOfUser **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfUser, sizeof(ns5__ArrayOfUser), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfUser(struct soap *soap, ns5__ArrayOfUser *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__ArrayOfUser);
	if (soap_out_PointerTons5__ArrayOfUser(soap, tag?tag:"ns5:ArrayOfUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfUser ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfUser(struct soap *soap, ns5__ArrayOfUser **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfRelationship(struct soap *soap, ns5__ArrayOfRelationship *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfRelationship))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfRelationship(struct soap *soap, const char *tag, int id, ns5__ArrayOfRelationship *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfRelationship);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__ArrayOfRelationship ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfRelationship(struct soap *soap, const char *tag, ns5__ArrayOfRelationship **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfRelationship **)soap_malloc(soap, sizeof(ns5__ArrayOfRelationship *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfRelationship *)soap_instantiate_ns5__ArrayOfRelationship(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__ArrayOfRelationship ** p = (ns5__ArrayOfRelationship **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfRelationship, sizeof(ns5__ArrayOfRelationship), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfRelationship(struct soap *soap, ns5__ArrayOfRelationship *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__ArrayOfRelationship);
	if (soap_out_PointerTons5__ArrayOfRelationship(soap, tag?tag:"ns5:ArrayOfRelationship", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfRelationship ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfRelationship(struct soap *soap, ns5__ArrayOfRelationship **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfRelationship(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfRelationshipTag(struct soap *soap, ns5__ArrayOfRelationshipTag *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfRelationshipTag))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfRelationshipTag(struct soap *soap, const char *tag, int id, ns5__ArrayOfRelationshipTag *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfRelationshipTag);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__ArrayOfRelationshipTag ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfRelationshipTag(struct soap *soap, const char *tag, ns5__ArrayOfRelationshipTag **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfRelationshipTag **)soap_malloc(soap, sizeof(ns5__ArrayOfRelationshipTag *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfRelationshipTag *)soap_instantiate_ns5__ArrayOfRelationshipTag(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__ArrayOfRelationshipTag ** p = (ns5__ArrayOfRelationshipTag **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfRelationshipTag, sizeof(ns5__ArrayOfRelationshipTag), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfRelationshipTag(struct soap *soap, ns5__ArrayOfRelationshipTag *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__ArrayOfRelationshipTag);
	if (soap_out_PointerTons5__ArrayOfRelationshipTag(soap, tag?tag:"ns5:ArrayOfRelationshipTag", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfRelationshipTag ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfRelationshipTag(struct soap *soap, ns5__ArrayOfRelationshipTag **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfRelationshipTag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfInterest(struct soap *soap, ns5__ArrayOfInterest *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfInterest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfInterest(struct soap *soap, const char *tag, int id, ns5__ArrayOfInterest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfInterest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__ArrayOfInterest ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfInterest(struct soap *soap, const char *tag, ns5__ArrayOfInterest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfInterest **)soap_malloc(soap, sizeof(ns5__ArrayOfInterest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfInterest *)soap_instantiate_ns5__ArrayOfInterest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__ArrayOfInterest ** p = (ns5__ArrayOfInterest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfInterest, sizeof(ns5__ArrayOfInterest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfInterest(struct soap *soap, ns5__ArrayOfInterest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__ArrayOfInterest);
	if (soap_out_PointerTons5__ArrayOfInterest(soap, tag?tag:"ns5:ArrayOfInterest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfInterest ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfInterest(struct soap *soap, ns5__ArrayOfInterest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfInterest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfHumourStatus(struct soap *soap, ns5__ArrayOfHumourStatus *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfHumourStatus))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfHumourStatus(struct soap *soap, const char *tag, int id, ns5__ArrayOfHumourStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfHumourStatus);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__ArrayOfHumourStatus ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfHumourStatus(struct soap *soap, const char *tag, ns5__ArrayOfHumourStatus **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfHumourStatus **)soap_malloc(soap, sizeof(ns5__ArrayOfHumourStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfHumourStatus *)soap_instantiate_ns5__ArrayOfHumourStatus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__ArrayOfHumourStatus ** p = (ns5__ArrayOfHumourStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfHumourStatus, sizeof(ns5__ArrayOfHumourStatus), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfHumourStatus(struct soap *soap, ns5__ArrayOfHumourStatus *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__ArrayOfHumourStatus);
	if (soap_out_PointerTons5__ArrayOfHumourStatus(soap, tag?tag:"ns5:ArrayOfHumourStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfHumourStatus ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfHumourStatus(struct soap *soap, ns5__ArrayOfHumourStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfHumourStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, ns3__FaultException_x002eFaultReasonData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__FaultException_x002eFaultReasonData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, const char *tag, int id, ns3__FaultException_x002eFaultReasonData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__FaultException_x002eFaultReasonData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__FaultException_x002eFaultReasonData ** SOAP_FMAC4 soap_in_PointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, const char *tag, ns3__FaultException_x002eFaultReasonData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__FaultException_x002eFaultReasonData **)soap_malloc(soap, sizeof(ns3__FaultException_x002eFaultReasonData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__FaultException_x002eFaultReasonData *)soap_instantiate_ns3__FaultException_x002eFaultReasonData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__FaultException_x002eFaultReasonData ** p = (ns3__FaultException_x002eFaultReasonData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__FaultException_x002eFaultReasonData, sizeof(ns3__FaultException_x002eFaultReasonData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, ns3__FaultException_x002eFaultReasonData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__FaultException_x002eFaultReasonData);
	if (soap_out_PointerTons3__FaultException_x002eFaultReasonData(soap, tag?tag:"ns3:FaultException.FaultReasonData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__FaultException_x002eFaultReasonData ** SOAP_FMAC4 soap_get_PointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, ns3__FaultException_x002eFaultReasonData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__FaultException_x002eFaultReasonData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, ns3__FaultException_x002eFaultCodeData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__FaultException_x002eFaultCodeData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, const char *tag, int id, ns3__FaultException_x002eFaultCodeData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__FaultException_x002eFaultCodeData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__FaultException_x002eFaultCodeData ** SOAP_FMAC4 soap_in_PointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, const char *tag, ns3__FaultException_x002eFaultCodeData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__FaultException_x002eFaultCodeData **)soap_malloc(soap, sizeof(ns3__FaultException_x002eFaultCodeData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__FaultException_x002eFaultCodeData *)soap_instantiate_ns3__FaultException_x002eFaultCodeData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__FaultException_x002eFaultCodeData ** p = (ns3__FaultException_x002eFaultCodeData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__FaultException_x002eFaultCodeData, sizeof(ns3__FaultException_x002eFaultCodeData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, ns3__FaultException_x002eFaultCodeData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__FaultException_x002eFaultCodeData);
	if (soap_out_PointerTons3__FaultException_x002eFaultCodeData(soap, tag?tag:"ns3:FaultException.FaultCodeData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__FaultException_x002eFaultCodeData ** SOAP_FMAC4 soap_get_PointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, ns3__FaultException_x002eFaultCodeData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__FaultException_x002eFaultCodeData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Graph(struct soap *soap, ns5__Graph *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__Graph))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Graph(struct soap *soap, const char *tag, int id, ns5__Graph *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__Graph);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__Graph ** SOAP_FMAC4 soap_in_PointerTons5__Graph(struct soap *soap, const char *tag, ns5__Graph **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__Graph **)soap_malloc(soap, sizeof(ns5__Graph *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__Graph *)soap_instantiate_ns5__Graph(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__Graph ** p = (ns5__Graph **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__Graph, sizeof(ns5__Graph), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Graph(struct soap *soap, ns5__Graph *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__Graph);
	if (soap_out_PointerTons5__Graph(soap, tag?tag:"ns5:Graph", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__Graph ** SOAP_FMAC4 soap_get_PointerTons5__Graph(struct soap *soap, ns5__Graph **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__Graph(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int >*a)
{
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	int n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_int(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_int, SOAP_TYPE_std__vectorTemplateOfint, sizeof(int), 0))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else if (!soap_in_int(soap, tag, &n, "xsd:int"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfint(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<int >, n);
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__User(struct soap *soap, std::vector<ns5__User * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__User(struct soap *soap, const std::vector<ns5__User * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns5__User * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons5__User(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__User(struct soap *soap, const char *tag, int id, const std::vector<ns5__User * >*a, const char *type)
{
	for (std::vector<ns5__User * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons5__User(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns5__User * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__User(struct soap *soap, const char *tag, std::vector<ns5__User * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns5__User *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns5__User, SOAP_TYPE_std__vectorTemplateOfPointerTons5__User, sizeof(ns5__User), 1))
				break;
			if (!soap_in_PointerTons5__User(soap, tag, NULL, "ns5:User"))
				break;
		}
		else if (!soap_in_PointerTons5__User(soap, tag, &n, "ns5:User"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons5__User(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns5__User * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__User(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons5__User(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons5__User, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns5__User * >);
		if (size)
			*size = sizeof(std::vector<ns5__User * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns5__User * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns5__User * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns5__User * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__User(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns5__User * > %p -> %p\n", q, p));
	*(std::vector<ns5__User * >*)p = *(std::vector<ns5__User * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__Relationship(struct soap *soap, std::vector<ns5__Relationship * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__Relationship(struct soap *soap, const std::vector<ns5__Relationship * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns5__Relationship * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons5__Relationship(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__Relationship(struct soap *soap, const char *tag, int id, const std::vector<ns5__Relationship * >*a, const char *type)
{
	for (std::vector<ns5__Relationship * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons5__Relationship(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns5__Relationship * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__Relationship(struct soap *soap, const char *tag, std::vector<ns5__Relationship * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns5__Relationship *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns5__Relationship, SOAP_TYPE_std__vectorTemplateOfPointerTons5__Relationship, sizeof(ns5__Relationship), 1))
				break;
			if (!soap_in_PointerTons5__Relationship(soap, tag, NULL, "ns5:Relationship"))
				break;
		}
		else if (!soap_in_PointerTons5__Relationship(soap, tag, &n, "ns5:Relationship"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons5__Relationship(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns5__Relationship * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__Relationship(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons5__Relationship(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons5__Relationship, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns5__Relationship * >);
		if (size)
			*size = sizeof(std::vector<ns5__Relationship * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns5__Relationship * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns5__Relationship * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns5__Relationship * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__Relationship(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns5__Relationship * > %p -> %p\n", q, p));
	*(std::vector<ns5__Relationship * >*)p = *(std::vector<ns5__Relationship * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__RelationshipTag(struct soap *soap, std::vector<ns5__RelationshipTag * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__RelationshipTag(struct soap *soap, const std::vector<ns5__RelationshipTag * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns5__RelationshipTag * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons5__RelationshipTag(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__RelationshipTag(struct soap *soap, const char *tag, int id, const std::vector<ns5__RelationshipTag * >*a, const char *type)
{
	for (std::vector<ns5__RelationshipTag * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons5__RelationshipTag(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns5__RelationshipTag * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__RelationshipTag(struct soap *soap, const char *tag, std::vector<ns5__RelationshipTag * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns5__RelationshipTag *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns5__RelationshipTag, SOAP_TYPE_std__vectorTemplateOfPointerTons5__RelationshipTag, sizeof(ns5__RelationshipTag), 1))
				break;
			if (!soap_in_PointerTons5__RelationshipTag(soap, tag, NULL, "ns5:RelationshipTag"))
				break;
		}
		else if (!soap_in_PointerTons5__RelationshipTag(soap, tag, &n, "ns5:RelationshipTag"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons5__RelationshipTag(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns5__RelationshipTag * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__RelationshipTag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons5__RelationshipTag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons5__RelationshipTag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns5__RelationshipTag * >);
		if (size)
			*size = sizeof(std::vector<ns5__RelationshipTag * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns5__RelationshipTag * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns5__RelationshipTag * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns5__RelationshipTag * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__RelationshipTag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns5__RelationshipTag * > %p -> %p\n", q, p));
	*(std::vector<ns5__RelationshipTag * >*)p = *(std::vector<ns5__RelationshipTag * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__Interest(struct soap *soap, std::vector<ns5__Interest * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__Interest(struct soap *soap, const std::vector<ns5__Interest * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns5__Interest * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons5__Interest(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__Interest(struct soap *soap, const char *tag, int id, const std::vector<ns5__Interest * >*a, const char *type)
{
	for (std::vector<ns5__Interest * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons5__Interest(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns5__Interest * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__Interest(struct soap *soap, const char *tag, std::vector<ns5__Interest * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns5__Interest *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns5__Interest, SOAP_TYPE_std__vectorTemplateOfPointerTons5__Interest, sizeof(ns5__Interest), 1))
				break;
			if (!soap_in_PointerTons5__Interest(soap, tag, NULL, "ns5:Interest"))
				break;
		}
		else if (!soap_in_PointerTons5__Interest(soap, tag, &n, "ns5:Interest"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons5__Interest(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns5__Interest * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__Interest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons5__Interest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons5__Interest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns5__Interest * >);
		if (size)
			*size = sizeof(std::vector<ns5__Interest * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns5__Interest * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns5__Interest * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns5__Interest * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__Interest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns5__Interest * > %p -> %p\n", q, p));
	*(std::vector<ns5__Interest * >*)p = *(std::vector<ns5__Interest * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__HumourStatus(struct soap *soap, std::vector<ns5__HumourStatus * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__HumourStatus(struct soap *soap, const std::vector<ns5__HumourStatus * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns5__HumourStatus * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons5__HumourStatus(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__HumourStatus(struct soap *soap, const char *tag, int id, const std::vector<ns5__HumourStatus * >*a, const char *type)
{
	for (std::vector<ns5__HumourStatus * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons5__HumourStatus(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns5__HumourStatus * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__HumourStatus(struct soap *soap, const char *tag, std::vector<ns5__HumourStatus * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns5__HumourStatus *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns5__HumourStatus, SOAP_TYPE_std__vectorTemplateOfPointerTons5__HumourStatus, sizeof(ns5__HumourStatus), 1))
				break;
			if (!soap_in_PointerTons5__HumourStatus(soap, tag, NULL, "ns5:HumourStatus"))
				break;
		}
		else if (!soap_in_PointerTons5__HumourStatus(soap, tag, &n, "ns5:HumourStatus"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons5__HumourStatus(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns5__HumourStatus * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__HumourStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons5__HumourStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons5__HumourStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns5__HumourStatus * >);
		if (size)
			*size = sizeof(std::vector<ns5__HumourStatus * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns5__HumourStatus * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns5__HumourStatus * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns5__HumourStatus * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__HumourStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns5__HumourStatus * > %p -> %p\n", q, p));
	*(std::vector<ns5__HumourStatus * >*)p = *(std::vector<ns5__HumourStatus * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap *soap, const std::vector<char * >*a)
{
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, int id, const std::vector<char * >*a, const char *type)
{
	for (std::vector<char * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_outliteral(soap, tag, &(*i), NULL))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, std::vector<char * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	char *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__XML, SOAP_TYPE_std__vectorTemplateOf_XML, sizeof(char *), 1))
				break;
			if (!soap_inliteral(soap, tag, NULL))
				break;
		}
		else if (!soap_inliteral(soap, tag, &n))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOf_XML(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_XML(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_XML, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<char * >);
		if (size)
			*size = sizeof(std::vector<char * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<char * >, n);
		if (size)
			*size = n * sizeof(std::vector<char * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<char * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_XML(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<char * > %p -> %p\n", q, p));
	*(std::vector<char * >*)p = *(std::vector<char * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, std::vector<ns3__FaultException_x002eFaultReasonData * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, const std::vector<ns3__FaultException_x002eFaultReasonData * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns3__FaultException_x002eFaultReasonData * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons3__FaultException_x002eFaultReasonData(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, const char *tag, int id, const std::vector<ns3__FaultException_x002eFaultReasonData * >*a, const char *type)
{
	for (std::vector<ns3__FaultException_x002eFaultReasonData * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons3__FaultException_x002eFaultReasonData(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns3__FaultException_x002eFaultReasonData * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, const char *tag, std::vector<ns3__FaultException_x002eFaultReasonData * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns3__FaultException_x002eFaultReasonData *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns3__FaultException_x002eFaultReasonData, SOAP_TYPE_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData, sizeof(ns3__FaultException_x002eFaultReasonData), 1))
				break;
			if (!soap_in_PointerTons3__FaultException_x002eFaultReasonData(soap, tag, NULL, "ns3:FaultException.FaultReasonData"))
				break;
		}
		else if (!soap_in_PointerTons3__FaultException_x002eFaultReasonData(soap, tag, &n, "ns3:FaultException.FaultReasonData"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns3__FaultException_x002eFaultReasonData * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns3__FaultException_x002eFaultReasonData * >);
		if (size)
			*size = sizeof(std::vector<ns3__FaultException_x002eFaultReasonData * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns3__FaultException_x002eFaultReasonData * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns3__FaultException_x002eFaultReasonData * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns3__FaultException_x002eFaultReasonData * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultReasonData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns3__FaultException_x002eFaultReasonData * > %p -> %p\n", q, p));
	*(std::vector<ns3__FaultException_x002eFaultReasonData * >*)p = *(std::vector<ns3__FaultException_x002eFaultReasonData * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, std::vector<ns3__FaultException_x002eFaultCodeData * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, const std::vector<ns3__FaultException_x002eFaultCodeData * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns3__FaultException_x002eFaultCodeData * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons3__FaultException_x002eFaultCodeData(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, const char *tag, int id, const std::vector<ns3__FaultException_x002eFaultCodeData * >*a, const char *type)
{
	for (std::vector<ns3__FaultException_x002eFaultCodeData * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons3__FaultException_x002eFaultCodeData(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns3__FaultException_x002eFaultCodeData * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, const char *tag, std::vector<ns3__FaultException_x002eFaultCodeData * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns3__FaultException_x002eFaultCodeData *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns3__FaultException_x002eFaultCodeData, SOAP_TYPE_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData, sizeof(ns3__FaultException_x002eFaultCodeData), 1))
				break;
			if (!soap_in_PointerTons3__FaultException_x002eFaultCodeData(soap, tag, NULL, "ns3:FaultException.FaultCodeData"))
				break;
		}
		else if (!soap_in_PointerTons3__FaultException_x002eFaultCodeData(soap, tag, &n, "ns3:FaultException.FaultCodeData"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns3__FaultException_x002eFaultCodeData * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns3__FaultException_x002eFaultCodeData * >);
		if (size)
			*size = sizeof(std::vector<ns3__FaultException_x002eFaultCodeData * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns3__FaultException_x002eFaultCodeData * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns3__FaultException_x002eFaultCodeData * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns3__FaultException_x002eFaultCodeData * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__FaultException_x002eFaultCodeData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns3__FaultException_x002eFaultCodeData * > %p -> %p\n", q, p));
	*(std::vector<ns3__FaultException_x002eFaultCodeData * >*)p = *(std::vector<ns3__FaultException_x002eFaultCodeData * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
