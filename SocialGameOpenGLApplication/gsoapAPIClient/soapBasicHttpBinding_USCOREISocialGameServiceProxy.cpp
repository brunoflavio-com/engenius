/* soapBasicHttpBinding_USCOREISocialGameServiceProxy.cpp
   Generated by gSOAP 2.8.17 from stub/Service1.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapBasicHttpBinding_USCOREISocialGameServiceProxy.h"

BasicHttpBinding_USCOREISocialGameServiceProxy::BasicHttpBinding_USCOREISocialGameServiceProxy()
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREISocialGameServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BasicHttpBinding_USCOREISocialGameServiceProxy::BasicHttpBinding_USCOREISocialGameServiceProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	BasicHttpBinding_USCOREISocialGameServiceProxy_init(_soap->imode, _soap->omode);
}

BasicHttpBinding_USCOREISocialGameServiceProxy::BasicHttpBinding_USCOREISocialGameServiceProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREISocialGameServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

BasicHttpBinding_USCOREISocialGameServiceProxy::BasicHttpBinding_USCOREISocialGameServiceProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREISocialGameServiceProxy_init(iomode, iomode);
}

BasicHttpBinding_USCOREISocialGameServiceProxy::BasicHttpBinding_USCOREISocialGameServiceProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREISocialGameServiceProxy_init(iomode, iomode);
	soap_endpoint = url;
}

BasicHttpBinding_USCOREISocialGameServiceProxy::BasicHttpBinding_USCOREISocialGameServiceProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREISocialGameServiceProxy_init(imode, omode);
}

BasicHttpBinding_USCOREISocialGameServiceProxy::~BasicHttpBinding_USCOREISocialGameServiceProxy()
{	if (this->own)
		soap_free(this->soap);
}

void BasicHttpBinding_USCOREISocialGameServiceProxy::BasicHttpBinding_USCOREISocialGameServiceProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns3", "http://schemas.datacontract.org/2004/07/SocialGamePublicAPI", NULL, NULL},
	{"ns1", "http://wvm008.dei.isep.ipp.pt", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void BasicHttpBinding_USCOREISocialGameServiceProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void BasicHttpBinding_USCOREISocialGameServiceProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	BasicHttpBinding_USCOREISocialGameServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void BasicHttpBinding_USCOREISocialGameServiceProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *BasicHttpBinding_USCOREISocialGameServiceProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *BasicHttpBinding_USCOREISocialGameServiceProxy::soap_fault()
{	return this->soap->fault;
}

const char *BasicHttpBinding_USCOREISocialGameServiceProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *BasicHttpBinding_USCOREISocialGameServiceProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int BasicHttpBinding_USCOREISocialGameServiceProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int BasicHttpBinding_USCOREISocialGameServiceProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void BasicHttpBinding_USCOREISocialGameServiceProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void BasicHttpBinding_USCOREISocialGameServiceProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *BasicHttpBinding_USCOREISocialGameServiceProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int BasicHttpBinding_USCOREISocialGameServiceProxy::Login(const char *endpoint, const char *soap_action, _ns1__Login *ns1__Login, _ns1__LoginResponse *ns1__LoginResponse)
{	struct soap *soap = this->soap;
	struct __ns1__Login soap_tmp___ns1__Login;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wvm008.dei.isep.ipp.pt/SocialGameAPI.svc";
	if (soap_action == NULL)
		soap_action = "http://wvm008.dei.isep.ipp.pt/ISocialGameService/Login";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Login.ns1__Login = ns1__Login;
	soap_serializeheader(soap);
	soap_serialize___ns1__Login(soap, &soap_tmp___ns1__Login);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Login(soap, &soap_tmp___ns1__Login, "-ns1:Login", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Login(soap, &soap_tmp___ns1__Login, "-ns1:Login", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LoginResponse)
		return soap_closesock(soap);
	ns1__LoginResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LoginResponse->soap_get(soap, "ns1:LoginResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREISocialGameServiceProxy::GetGraph(const char *endpoint, const char *soap_action, _ns1__GetGraph *ns1__GetGraph, _ns1__GetGraphResponse *ns1__GetGraphResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetGraph soap_tmp___ns1__GetGraph;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wvm008.dei.isep.ipp.pt/SocialGameAPI.svc";
	if (soap_action == NULL)
		soap_action = "http://wvm008.dei.isep.ipp.pt/ISocialGameService/GetGraph";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetGraph.ns1__GetGraph = ns1__GetGraph;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetGraph(soap, &soap_tmp___ns1__GetGraph);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetGraph(soap, &soap_tmp___ns1__GetGraph, "-ns1:GetGraph", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetGraph(soap, &soap_tmp___ns1__GetGraph, "-ns1:GetGraph", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetGraphResponse)
		return soap_closesock(soap);
	ns1__GetGraphResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetGraphResponse->soap_get(soap, "ns1:GetGraphResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREISocialGameServiceProxy::Logout(const char *endpoint, const char *soap_action, _ns1__Logout *ns1__Logout, _ns1__LogoutResponse *ns1__LogoutResponse)
{	struct soap *soap = this->soap;
	struct __ns1__Logout soap_tmp___ns1__Logout;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wvm008.dei.isep.ipp.pt/SocialGameAPI.svc";
	if (soap_action == NULL)
		soap_action = "http://wvm008.dei.isep.ipp.pt/ISocialGameService/Logout";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Logout.ns1__Logout = ns1__Logout;
	soap_serializeheader(soap);
	soap_serialize___ns1__Logout(soap, &soap_tmp___ns1__Logout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Logout(soap, &soap_tmp___ns1__Logout, "-ns1:Logout", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Logout(soap, &soap_tmp___ns1__Logout, "-ns1:Logout", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LogoutResponse)
		return soap_closesock(soap);
	ns1__LogoutResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LogoutResponse->soap_get(soap, "ns1:LogoutResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
