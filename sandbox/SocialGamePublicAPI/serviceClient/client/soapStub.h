/* soapStub.h
   Generated by gSOAP 2.8.17 from stub/Service1.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"http://wvm008.dei.isep.ipp.pt/graphService/Imports"
#define SOAP_NAMESPACE_OF_ns1	"http://wvm008.dei.isep.ipp.pt/graphService"
#define SOAP_NAMESPACE_OF_ns3	"http://schemas.datacontract.org/2004/07/WcfCustomAuthSession"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__Login
#define SOAP_TYPE__ns1__Login (8)
/* ns1:Login */
class SOAP_CMAC _ns1__Login
{
public:
	std::string *Email;	/* optional element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE__ns1__Login */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Login() { _ns1__Login::soap_default(NULL); }
	virtual ~_ns1__Login() { }
};
#endif

#ifndef SOAP_TYPE__ns1__LoginResponse
#define SOAP_TYPE__ns1__LoginResponse (9)
/* ns1:LoginResponse */
class SOAP_CMAC _ns1__LoginResponse
{
public:
	std::string *LoginResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique type id SOAP_TYPE__ns1__LoginResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__LoginResponse() { _ns1__LoginResponse::soap_default(NULL); }
	virtual ~_ns1__LoginResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetGraph
#define SOAP_TYPE__ns1__GetGraph (10)
/* ns1:GetGraph */
class SOAP_CMAC _ns1__GetGraph
{
public:
	std::string *Token;	/* optional element of type xsd:string */
	std::string *Email;	/* optional element of type xsd:string */
	int *graphDepth;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE__ns1__GetGraph */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetGraph() { _ns1__GetGraph::soap_default(NULL); }
	virtual ~_ns1__GetGraph() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetGraphResponse
#define SOAP_TYPE__ns1__GetGraphResponse (11)
/* ns1:GetGraphResponse */
class SOAP_CMAC _ns1__GetGraphResponse
{
public:
	class ns3__User *GetGraphResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique type id SOAP_TYPE__ns1__GetGraphResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetGraphResponse() { _ns1__GetGraphResponse::soap_default(NULL); }
	virtual ~_ns1__GetGraphResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__Logout
#define SOAP_TYPE__ns1__Logout (12)
/* ns1:Logout */
class SOAP_CMAC _ns1__Logout
{
public:
	std::string *Token;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique type id SOAP_TYPE__ns1__Logout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Logout() { _ns1__Logout::soap_default(NULL); }
	virtual ~_ns1__Logout() { }
};
#endif

#ifndef SOAP_TYPE__ns1__LogoutResponse
#define SOAP_TYPE__ns1__LogoutResponse (13)
/* ns1:LogoutResponse */
class SOAP_CMAC _ns1__LogoutResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE__ns1__LogoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__LogoutResponse() { _ns1__LogoutResponse::soap_default(NULL); }
	virtual ~_ns1__LogoutResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns3__User
#define SOAP_TYPE_ns3__User (14)
/* ns3:User */
class SOAP_CMAC ns3__User
{
public:
	class ns3__ArrayOfConnection *Connections;	/* optional element of type ns3:ArrayOfConnection */
	class ns3__ArrayOfUserTag *UserTags;	/* optional element of type ns3:ArrayOfUserTag */
	std::string *Username;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE_ns3__User */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__User() { ns3__User::soap_default(NULL); }
	virtual ~ns3__User() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfConnection
#define SOAP_TYPE_ns3__ArrayOfConnection (15)
/* ns3:ArrayOfConnection */
class SOAP_CMAC ns3__ArrayOfConnection
{
public:
	std::vector<class ns3__Connection * >Connection;	/* optional element of type ns3:Connection */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_ns3__ArrayOfConnection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfConnection() { ns3__ArrayOfConnection::soap_default(NULL); }
	virtual ~ns3__ArrayOfConnection() { }
};
#endif

#ifndef SOAP_TYPE_ns3__Connection
#define SOAP_TYPE_ns3__Connection (16)
/* ns3:Connection */
class SOAP_CMAC ns3__Connection
{
public:
	class ns3__ConnectionTag *ConnectionTag;	/* optional element of type ns3:ConnectionTag */
	ns3__User *User;	/* optional element of type ns3:User */
	int *strength;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_ns3__Connection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__Connection() { ns3__Connection::soap_default(NULL); }
	virtual ~ns3__Connection() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ConnectionTag
#define SOAP_TYPE_ns3__ConnectionTag (17)
/* ns3:ConnectionTag */
class SOAP_CMAC ns3__ConnectionTag
{
public:
	std::string *ConnectionTagName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique type id SOAP_TYPE_ns3__ConnectionTag */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ConnectionTag() { ns3__ConnectionTag::soap_default(NULL); }
	virtual ~ns3__ConnectionTag() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfUserTag
#define SOAP_TYPE_ns3__ArrayOfUserTag (18)
/* ns3:ArrayOfUserTag */
class SOAP_CMAC ns3__ArrayOfUserTag
{
public:
	std::vector<class ns3__UserTag * >UserTag;	/* optional element of type ns3:UserTag */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique type id SOAP_TYPE_ns3__ArrayOfUserTag */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfUserTag() { ns3__ArrayOfUserTag::soap_default(NULL); }
	virtual ~ns3__ArrayOfUserTag() { }
};
#endif

#ifndef SOAP_TYPE_ns3__UserTag
#define SOAP_TYPE_ns3__UserTag (19)
/* ns3:UserTag */
class SOAP_CMAC ns3__UserTag
{
public:
	std::string *UserTagName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique type id SOAP_TYPE_ns3__UserTag */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__UserTag() { ns3__UserTag::soap_default(NULL); }
	virtual ~ns3__UserTag() { }
};
#endif

#ifndef SOAP_TYPE___ns1__Login
#define SOAP_TYPE___ns1__Login (35)
/* Operation wrapper: */
struct __ns1__Login
{
public:
	_ns1__Login *ns1__Login;	/* optional element of type ns1:Login */
public:
	int soap_type() const { return 35; } /* = unique type id SOAP_TYPE___ns1__Login */
};
#endif

#ifndef SOAP_TYPE___ns1__GetGraph
#define SOAP_TYPE___ns1__GetGraph (39)
/* Operation wrapper: */
struct __ns1__GetGraph
{
public:
	_ns1__GetGraph *ns1__GetGraph;	/* optional element of type ns1:GetGraph */
public:
	int soap_type() const { return 39; } /* = unique type id SOAP_TYPE___ns1__GetGraph */
};
#endif

#ifndef SOAP_TYPE___ns1__Logout
#define SOAP_TYPE___ns1__Logout (43)
/* Operation wrapper: */
struct __ns1__Logout
{
public:
	_ns1__Logout *ns1__Logout;	/* optional element of type ns1:Logout */
public:
	int soap_type() const { return 43; } /* = unique type id SOAP_TYPE___ns1__Logout */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (44)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 44; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (45)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 45; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (47)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 47; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (50)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 50; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (51)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 51; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
